///<reference path="./jaydata.d.ts" />
/*//////////////////////////////////////////////////////////////////////////////////////
////// Autogenerated by JaySvcUtil.exe http://JayData.org for more info        /////////
//////                      oData V3 TypeScript                                /////////
//////////////////////////////////////////////////////////////////////////////////////*/


module cfacore.shared.domain.store {
  class Store extends $data.Entity {
    constructor ();
    constructor (initData: { LocationNumber?: string; BusinessConsultantId?: string; ConceptCode?: string; ConceptCodeId?: number; CorporateOwned?: bool; Phone?: cfacore.shared.domain.user.Phone; PhoneString?: string; Fax?: cfacore.shared.domain.user.Phone; FaxString?: string; VoiceMail?: cfacore.shared.domain.user.Phone; VoiceMailString?: string; Email?: string; Features?: cfacore.shared.domain.store.StoreFeatures; Playground?: string; FinancialConsultantId?: string; GMTOffset?: string; Coordinates?: cfacore.shared.domain.store.GeographicCoordinate; LocationCode?: string; LocationCodeId?: number; MarketableName?: string; MarketableURL?: System.Uri; MarketableUrlString?: string; Message?: string; LocationDescription?: string; Name?: string; OpenDate?: Date; OperatorTeamName?: string; PriceGroupNumber?: string; ProjectedOpenDate?: Date; RegionName?: string; ServiceTeamName?: string; Status?: string; StatusId?: number; SiteStatus?: string; BusinessConsultant?: cfacore.domain.user.User; BillingAddress?: cfacore.shared.domain.user.Address; ShippingAddress?: cfacore.shared.domain.user.Address; StreetAddress?: cfacore.shared.domain.user.Address; Distributor?: cfacore.shared.domain.store.Distributor; FinancialConsultant?: cfacore.domain.user.User; LocationContact?: cfacore.domain.user.User; MarketingConsultant?: cfacore.domain.user.User; Operator?: cfacore.domain.user.User; UnitMarketingDirector?: cfacore.domain.user.User; });
    LocationNumber: string;
    BusinessConsultantId: string;
    ConceptCode: string;
    ConceptCodeId: number;
    CorporateOwned: bool;
    Phone: cfacore.shared.domain.user.Phone;
    PhoneString: string;
    Fax: cfacore.shared.domain.user.Phone;
    FaxString: string;
    VoiceMail: cfacore.shared.domain.user.Phone;
    VoiceMailString: string;
    Email: string;
    Features: cfacore.shared.domain.store.StoreFeatures;
    Playground: string;
    FinancialConsultantId: string;
    GMTOffset: string;
    Coordinates: cfacore.shared.domain.store.GeographicCoordinate;
    LocationCode: string;
    LocationCodeId: number;
    MarketableName: string;
    MarketableURL: System.Uri;
    MarketableUrlString: string;
    Message: string;
    LocationDescription: string;
    Name: string;
    OpenDate: Date;
    OperatorTeamName: string;
    PriceGroupNumber: string;
    ProjectedOpenDate: Date;
    RegionName: string;
    ServiceTeamName: string;
    Status: string;
    StatusId: number;
    SiteStatus: string;
    BusinessConsultant: cfacore.domain.user.User;
    BillingAddress: cfacore.shared.domain.user.Address;
    ShippingAddress: cfacore.shared.domain.user.Address;
    StreetAddress: cfacore.shared.domain.user.Address;
    Distributor: cfacore.shared.domain.store.Distributor;
    FinancialConsultant: cfacore.domain.user.User;
    LocationContact: cfacore.domain.user.User;
    MarketingConsultant: cfacore.domain.user.User;
    Operator: cfacore.domain.user.User;
    UnitMarketingDirector: cfacore.domain.user.User;
    
  }

  export interface StoreQueryable extends $data.Queryable {
    filter(predicate:(it: cfacore.shared.domain.store.Store) => bool): cfacore.shared.domain.store.StoreQueryable;
    filter(predicate:(it: cfacore.shared.domain.store.Store) => bool, thisArg: any): cfacore.shared.domain.store.StoreQueryable;

    map(projection: (it: cfacore.shared.domain.store.Store) => any): cfacore.shared.domain.store.StoreQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfacore.shared.domain.store.Store) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfacore.shared.domain.store.Store[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfacore.shared.domain.store.Store[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfacore.shared.domain.store.Store, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.store.Store) => void): $data.IPromise;
    single(predicate: (it: cfacore.shared.domain.store.Store, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.store.Store[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfacore.shared.domain.store.StoreQueryable;
    skip(amout: number): cfacore.shared.domain.store.StoreQueryable;

    order(selector: string): cfacore.shared.domain.store.StoreQueryable;
    orderBy(predicate: (it: cfacore.shared.domain.store.Store) => any): cfacore.shared.domain.store.StoreQueryable;
    orderByDescending(predicate: (it: cfacore.shared.domain.store.Store) => any): cfacore.shared.domain.store.StoreQueryable;
    
    first(predicate: (it: cfacore.shared.domain.store.Store, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.store.Store) => void): $data.IPromise;
    first(predicate: (it: cfacore.shared.domain.store.Store, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.store.Store[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfacore.shared.domain.store.StoreQueryable;
    withInlineCount(): cfacore.shared.domain.store.StoreQueryable;
    withInlineCount(selector: string): cfacore.shared.domain.store.StoreQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface StoreSet extends StoreQueryable {
    add(initData: { LocationNumber?: string; BusinessConsultantId?: string; ConceptCode?: string; ConceptCodeId?: number; CorporateOwned?: bool; Phone?: cfacore.shared.domain.user.Phone; PhoneString?: string; Fax?: cfacore.shared.domain.user.Phone; FaxString?: string; VoiceMail?: cfacore.shared.domain.user.Phone; VoiceMailString?: string; Email?: string; Features?: cfacore.shared.domain.store.StoreFeatures; Playground?: string; FinancialConsultantId?: string; GMTOffset?: string; Coordinates?: cfacore.shared.domain.store.GeographicCoordinate; LocationCode?: string; LocationCodeId?: number; MarketableName?: string; MarketableURL?: System.Uri; MarketableUrlString?: string; Message?: string; LocationDescription?: string; Name?: string; OpenDate?: Date; OperatorTeamName?: string; PriceGroupNumber?: string; ProjectedOpenDate?: Date; RegionName?: string; ServiceTeamName?: string; Status?: string; StatusId?: number; SiteStatus?: string; BusinessConsultant?: cfacore.domain.user.User; BillingAddress?: cfacore.shared.domain.user.Address; ShippingAddress?: cfacore.shared.domain.user.Address; StreetAddress?: cfacore.shared.domain.user.Address; Distributor?: cfacore.shared.domain.store.Distributor; FinancialConsultant?: cfacore.domain.user.User; LocationContact?: cfacore.domain.user.User; MarketingConsultant?: cfacore.domain.user.User; Operator?: cfacore.domain.user.User; UnitMarketingDirector?: cfacore.domain.user.User; }): cfacore.shared.domain.store.Store;
    add(item: cfacore.shared.domain.store.Store): cfacore.shared.domain.store.Store;

    attach(item: cfacore.shared.domain.store.Store): void;
    attach(item: { LocationNumber: string; }): void;
    attachOrGet(item: cfacore.shared.domain.store.Store): cfacore.shared.domain.store.Store;
    attachOrGet(item: { LocationNumber: string; }): cfacore.shared.domain.store.Store;

    detach(item: cfacore.shared.domain.store.Store): void;
    detach(item: { LocationNumber: string; }): void;

    remove(item: cfacore.shared.domain.store.Store): void;
    remove(item: { LocationNumber: string; }): void;
    
    elementType: new (initData: { LocationNumber?: string; BusinessConsultantId?: string; ConceptCode?: string; ConceptCodeId?: number; CorporateOwned?: bool; Phone?: cfacore.shared.domain.user.Phone; PhoneString?: string; Fax?: cfacore.shared.domain.user.Phone; FaxString?: string; VoiceMail?: cfacore.shared.domain.user.Phone; VoiceMailString?: string; Email?: string; Features?: cfacore.shared.domain.store.StoreFeatures; Playground?: string; FinancialConsultantId?: string; GMTOffset?: string; Coordinates?: cfacore.shared.domain.store.GeographicCoordinate; LocationCode?: string; LocationCodeId?: number; MarketableName?: string; MarketableURL?: System.Uri; MarketableUrlString?: string; Message?: string; LocationDescription?: string; Name?: string; OpenDate?: Date; OperatorTeamName?: string; PriceGroupNumber?: string; ProjectedOpenDate?: Date; RegionName?: string; ServiceTeamName?: string; Status?: string; StatusId?: number; SiteStatus?: string; BusinessConsultant?: cfacore.domain.user.User; BillingAddress?: cfacore.shared.domain.user.Address; ShippingAddress?: cfacore.shared.domain.user.Address; StreetAddress?: cfacore.shared.domain.user.Address; Distributor?: cfacore.shared.domain.store.Distributor; FinancialConsultant?: cfacore.domain.user.User; LocationContact?: cfacore.domain.user.User; MarketingConsultant?: cfacore.domain.user.User; Operator?: cfacore.domain.user.User; UnitMarketingDirector?: cfacore.domain.user.User; }) => cfacore.shared.domain.store.Store;
  }

  class Distributor extends $data.Entity {
    constructor ();
    constructor (initData: { DistributionCenter?: string; Name?: string; ShortName?: string; DistributorId?: string; });
    DistributionCenter: string;
    Name: string;
    ShortName: string;
    DistributorId: string;
    
  }

  export interface DistributorQueryable extends $data.Queryable {
    filter(predicate:(it: cfacore.shared.domain.store.Distributor) => bool): cfacore.shared.domain.store.DistributorQueryable;
    filter(predicate:(it: cfacore.shared.domain.store.Distributor) => bool, thisArg: any): cfacore.shared.domain.store.DistributorQueryable;

    map(projection: (it: cfacore.shared.domain.store.Distributor) => any): cfacore.shared.domain.store.DistributorQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfacore.shared.domain.store.Distributor) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfacore.shared.domain.store.Distributor[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfacore.shared.domain.store.Distributor[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfacore.shared.domain.store.Distributor, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.store.Distributor) => void): $data.IPromise;
    single(predicate: (it: cfacore.shared.domain.store.Distributor, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.store.Distributor[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfacore.shared.domain.store.DistributorQueryable;
    skip(amout: number): cfacore.shared.domain.store.DistributorQueryable;

    order(selector: string): cfacore.shared.domain.store.DistributorQueryable;
    orderBy(predicate: (it: cfacore.shared.domain.store.Distributor) => any): cfacore.shared.domain.store.DistributorQueryable;
    orderByDescending(predicate: (it: cfacore.shared.domain.store.Distributor) => any): cfacore.shared.domain.store.DistributorQueryable;
    
    first(predicate: (it: cfacore.shared.domain.store.Distributor, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.store.Distributor) => void): $data.IPromise;
    first(predicate: (it: cfacore.shared.domain.store.Distributor, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.store.Distributor[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfacore.shared.domain.store.DistributorQueryable;
    withInlineCount(): cfacore.shared.domain.store.DistributorQueryable;
    withInlineCount(selector: string): cfacore.shared.domain.store.DistributorQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface DistributorSet extends DistributorQueryable {
    add(initData: { DistributionCenter?: string; Name?: string; ShortName?: string; DistributorId?: string; }): cfacore.shared.domain.store.Distributor;
    add(item: cfacore.shared.domain.store.Distributor): cfacore.shared.domain.store.Distributor;

    attach(item: cfacore.shared.domain.store.Distributor): void;
    attach(item: { DistributorId: string; }): void;
    attachOrGet(item: cfacore.shared.domain.store.Distributor): cfacore.shared.domain.store.Distributor;
    attachOrGet(item: { DistributorId: string; }): cfacore.shared.domain.store.Distributor;

    detach(item: cfacore.shared.domain.store.Distributor): void;
    detach(item: { DistributorId: string; }): void;

    remove(item: cfacore.shared.domain.store.Distributor): void;
    remove(item: { DistributorId: string; }): void;
    
    elementType: new (initData: { DistributionCenter?: string; Name?: string; ShortName?: string; DistributorId?: string; }) => cfacore.shared.domain.store.Distributor;
  }

  class GeographicCoordinate extends $data.Entity {
    constructor ();
    constructor (initData: { Latitude?: number; Longitude?: number; });
    Latitude: number;
    Longitude: number;
    
  }

  export interface GeographicCoordinateQueryable extends $data.Queryable {
    filter(predicate:(it: cfacore.shared.domain.store.GeographicCoordinate) => bool): cfacore.shared.domain.store.GeographicCoordinateQueryable;
    filter(predicate:(it: cfacore.shared.domain.store.GeographicCoordinate) => bool, thisArg: any): cfacore.shared.domain.store.GeographicCoordinateQueryable;

    map(projection: (it: cfacore.shared.domain.store.GeographicCoordinate) => any): cfacore.shared.domain.store.GeographicCoordinateQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfacore.shared.domain.store.GeographicCoordinate) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfacore.shared.domain.store.GeographicCoordinate[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfacore.shared.domain.store.GeographicCoordinate[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfacore.shared.domain.store.GeographicCoordinate, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.store.GeographicCoordinate) => void): $data.IPromise;
    single(predicate: (it: cfacore.shared.domain.store.GeographicCoordinate, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.store.GeographicCoordinate[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfacore.shared.domain.store.GeographicCoordinateQueryable;
    skip(amout: number): cfacore.shared.domain.store.GeographicCoordinateQueryable;

    order(selector: string): cfacore.shared.domain.store.GeographicCoordinateQueryable;
    orderBy(predicate: (it: cfacore.shared.domain.store.GeographicCoordinate) => any): cfacore.shared.domain.store.GeographicCoordinateQueryable;
    orderByDescending(predicate: (it: cfacore.shared.domain.store.GeographicCoordinate) => any): cfacore.shared.domain.store.GeographicCoordinateQueryable;
    
    first(predicate: (it: cfacore.shared.domain.store.GeographicCoordinate, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.store.GeographicCoordinate) => void): $data.IPromise;
    first(predicate: (it: cfacore.shared.domain.store.GeographicCoordinate, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.store.GeographicCoordinate[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfacore.shared.domain.store.GeographicCoordinateQueryable;
    withInlineCount(): cfacore.shared.domain.store.GeographicCoordinateQueryable;
    withInlineCount(selector: string): cfacore.shared.domain.store.GeographicCoordinateQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }

  class StoreFeatures extends $data.Entity {
    constructor ();
    constructor (initData: { AcceptsCfaCard?: bool; HasDiningRoom?: bool; HasDriveThru?: bool; OffersOnlineOrdering?: bool; OffersWireless?: bool; Playground?: string; ServesBreakfast?: bool; });
    AcceptsCfaCard: bool;
    HasDiningRoom: bool;
    HasDriveThru: bool;
    OffersOnlineOrdering: bool;
    OffersWireless: bool;
    Playground: string;
    ServesBreakfast: bool;
    
  }

  export interface StoreFeaturesQueryable extends $data.Queryable {
    filter(predicate:(it: cfacore.shared.domain.store.StoreFeatures) => bool): cfacore.shared.domain.store.StoreFeaturesQueryable;
    filter(predicate:(it: cfacore.shared.domain.store.StoreFeatures) => bool, thisArg: any): cfacore.shared.domain.store.StoreFeaturesQueryable;

    map(projection: (it: cfacore.shared.domain.store.StoreFeatures) => any): cfacore.shared.domain.store.StoreFeaturesQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfacore.shared.domain.store.StoreFeatures) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfacore.shared.domain.store.StoreFeatures[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfacore.shared.domain.store.StoreFeatures[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfacore.shared.domain.store.StoreFeatures, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.store.StoreFeatures) => void): $data.IPromise;
    single(predicate: (it: cfacore.shared.domain.store.StoreFeatures, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.store.StoreFeatures[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfacore.shared.domain.store.StoreFeaturesQueryable;
    skip(amout: number): cfacore.shared.domain.store.StoreFeaturesQueryable;

    order(selector: string): cfacore.shared.domain.store.StoreFeaturesQueryable;
    orderBy(predicate: (it: cfacore.shared.domain.store.StoreFeatures) => any): cfacore.shared.domain.store.StoreFeaturesQueryable;
    orderByDescending(predicate: (it: cfacore.shared.domain.store.StoreFeatures) => any): cfacore.shared.domain.store.StoreFeaturesQueryable;
    
    first(predicate: (it: cfacore.shared.domain.store.StoreFeatures, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.store.StoreFeatures) => void): $data.IPromise;
    first(predicate: (it: cfacore.shared.domain.store.StoreFeatures, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.store.StoreFeatures[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfacore.shared.domain.store.StoreFeaturesQueryable;
    withInlineCount(): cfacore.shared.domain.store.StoreFeaturesQueryable;
    withInlineCount(selector: string): cfacore.shared.domain.store.StoreFeaturesQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }

}

module cfacore.domain.user {
  class User extends $data.Entity {
    constructor ();
    constructor (initData: { Creation?: Date; LastActivity?: Date; Email?: string; Username?: string; UID?: string; DN?: string; NameString?: string; HomePhoneString?: string; MobilePhoneString?: string; Authority?: string; AuthorityUID?: string; UserId?: number; });
    Creation: Date;
    LastActivity: Date;
    Email: string;
    Username: string;
    UID: string;
    DN: string;
    NameString: string;
    HomePhoneString: string;
    MobilePhoneString: string;
    Authority: string;
    AuthorityUID: string;
    UserId: number;
    
  }

  export interface UserQueryable extends $data.Queryable {
    filter(predicate:(it: cfacore.domain.user.User) => bool): cfacore.domain.user.UserQueryable;
    filter(predicate:(it: cfacore.domain.user.User) => bool, thisArg: any): cfacore.domain.user.UserQueryable;

    map(projection: (it: cfacore.domain.user.User) => any): cfacore.domain.user.UserQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfacore.domain.user.User) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfacore.domain.user.User[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfacore.domain.user.User[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfacore.domain.user.User, params?: any) => bool, params?: any, handler?: (result: cfacore.domain.user.User) => void): $data.IPromise;
    single(predicate: (it: cfacore.domain.user.User, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.domain.user.User[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfacore.domain.user.UserQueryable;
    skip(amout: number): cfacore.domain.user.UserQueryable;

    order(selector: string): cfacore.domain.user.UserQueryable;
    orderBy(predicate: (it: cfacore.domain.user.User) => any): cfacore.domain.user.UserQueryable;
    orderByDescending(predicate: (it: cfacore.domain.user.User) => any): cfacore.domain.user.UserQueryable;
    
    first(predicate: (it: cfacore.domain.user.User, params?: any) => bool, params?: any, handler?: (result: cfacore.domain.user.User) => void): $data.IPromise;
    first(predicate: (it: cfacore.domain.user.User, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.domain.user.User[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfacore.domain.user.UserQueryable;
    withInlineCount(): cfacore.domain.user.UserQueryable;
    withInlineCount(selector: string): cfacore.domain.user.UserQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface UserSet extends UserQueryable {
    add(initData: { Creation?: Date; LastActivity?: Date; Email?: string; Username?: string; UID?: string; DN?: string; NameString?: string; HomePhoneString?: string; MobilePhoneString?: string; Authority?: string; AuthorityUID?: string; UserId?: number; }): cfacore.domain.user.User;
    add(item: cfacore.domain.user.User): cfacore.domain.user.User;

    attach(item: cfacore.domain.user.User): void;
    attach(item: { UserId: number; }): void;
    attachOrGet(item: cfacore.domain.user.User): cfacore.domain.user.User;
    attachOrGet(item: { UserId: number; }): cfacore.domain.user.User;

    detach(item: cfacore.domain.user.User): void;
    detach(item: { UserId: number; }): void;

    remove(item: cfacore.domain.user.User): void;
    remove(item: { UserId: number; }): void;
    
    elementType: new (initData: { Creation?: Date; LastActivity?: Date; Email?: string; Username?: string; UID?: string; DN?: string; NameString?: string; HomePhoneString?: string; MobilePhoneString?: string; Authority?: string; AuthorityUID?: string; UserId?: number; }) => cfacore.domain.user.User;
  }

}

module cfacore.shared.domain.user {
  class Address extends $data.Entity {
    constructor ();
    constructor (initData: { Line2?: string; Line3?: string; Zip?: cfacore.shared.domain.user.Zip; ZipString?: string; County?: string; State?: string; AddressId?: number; Coordinates?: cfacore.shared.domain.store.GeographicCoordinate; Line1?: string; City?: string; Label?: string; Name?: cfacore.shared.domain.user.Name; NameString?: string; });
    Line2: string;
    Line3: string;
    Zip: cfacore.shared.domain.user.Zip;
    ZipString: string;
    County: string;
    State: string;
    AddressId: number;
    Coordinates: cfacore.shared.domain.store.GeographicCoordinate;
    Line1: string;
    City: string;
    Label: string;
    Name: cfacore.shared.domain.user.Name;
    NameString: string;
    
  }

  export interface AddressQueryable extends $data.Queryable {
    filter(predicate:(it: cfacore.shared.domain.user.Address) => bool): cfacore.shared.domain.user.AddressQueryable;
    filter(predicate:(it: cfacore.shared.domain.user.Address) => bool, thisArg: any): cfacore.shared.domain.user.AddressQueryable;

    map(projection: (it: cfacore.shared.domain.user.Address) => any): cfacore.shared.domain.user.AddressQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfacore.shared.domain.user.Address) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfacore.shared.domain.user.Address[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfacore.shared.domain.user.Address[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfacore.shared.domain.user.Address, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.user.Address) => void): $data.IPromise;
    single(predicate: (it: cfacore.shared.domain.user.Address, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.user.Address[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfacore.shared.domain.user.AddressQueryable;
    skip(amout: number): cfacore.shared.domain.user.AddressQueryable;

    order(selector: string): cfacore.shared.domain.user.AddressQueryable;
    orderBy(predicate: (it: cfacore.shared.domain.user.Address) => any): cfacore.shared.domain.user.AddressQueryable;
    orderByDescending(predicate: (it: cfacore.shared.domain.user.Address) => any): cfacore.shared.domain.user.AddressQueryable;
    
    first(predicate: (it: cfacore.shared.domain.user.Address, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.user.Address) => void): $data.IPromise;
    first(predicate: (it: cfacore.shared.domain.user.Address, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.user.Address[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfacore.shared.domain.user.AddressQueryable;
    withInlineCount(): cfacore.shared.domain.user.AddressQueryable;
    withInlineCount(selector: string): cfacore.shared.domain.user.AddressQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface AddressSet extends AddressQueryable {
    add(initData: { Line2?: string; Line3?: string; Zip?: cfacore.shared.domain.user.Zip; ZipString?: string; County?: string; State?: string; AddressId?: number; Coordinates?: cfacore.shared.domain.store.GeographicCoordinate; Line1?: string; City?: string; Label?: string; Name?: cfacore.shared.domain.user.Name; NameString?: string; }): cfacore.shared.domain.user.Address;
    add(item: cfacore.shared.domain.user.Address): cfacore.shared.domain.user.Address;

    attach(item: cfacore.shared.domain.user.Address): void;
    attach(item: { AddressId: number; }): void;
    attachOrGet(item: cfacore.shared.domain.user.Address): cfacore.shared.domain.user.Address;
    attachOrGet(item: { AddressId: number; }): cfacore.shared.domain.user.Address;

    detach(item: cfacore.shared.domain.user.Address): void;
    detach(item: { AddressId: number; }): void;

    remove(item: cfacore.shared.domain.user.Address): void;
    remove(item: { AddressId: number; }): void;
    
    elementType: new (initData: { Line2?: string; Line3?: string; Zip?: cfacore.shared.domain.user.Zip; ZipString?: string; County?: string; State?: string; AddressId?: number; Coordinates?: cfacore.shared.domain.store.GeographicCoordinate; Line1?: string; City?: string; Label?: string; Name?: cfacore.shared.domain.user.Name; NameString?: string; }) => cfacore.shared.domain.user.Address;
  }

  class Name extends $data.Entity {
    constructor ();
    constructor (initData: { First?: string; NickName?: string; Last?: string; Middle?: string; Surname?: string; });
    First: string;
    NickName: string;
    Last: string;
    Middle: string;
    Surname: string;
    
  }

  export interface NameQueryable extends $data.Queryable {
    filter(predicate:(it: cfacore.shared.domain.user.Name) => bool): cfacore.shared.domain.user.NameQueryable;
    filter(predicate:(it: cfacore.shared.domain.user.Name) => bool, thisArg: any): cfacore.shared.domain.user.NameQueryable;

    map(projection: (it: cfacore.shared.domain.user.Name) => any): cfacore.shared.domain.user.NameQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfacore.shared.domain.user.Name) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfacore.shared.domain.user.Name[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfacore.shared.domain.user.Name[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfacore.shared.domain.user.Name, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.user.Name) => void): $data.IPromise;
    single(predicate: (it: cfacore.shared.domain.user.Name, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.user.Name[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfacore.shared.domain.user.NameQueryable;
    skip(amout: number): cfacore.shared.domain.user.NameQueryable;

    order(selector: string): cfacore.shared.domain.user.NameQueryable;
    orderBy(predicate: (it: cfacore.shared.domain.user.Name) => any): cfacore.shared.domain.user.NameQueryable;
    orderByDescending(predicate: (it: cfacore.shared.domain.user.Name) => any): cfacore.shared.domain.user.NameQueryable;
    
    first(predicate: (it: cfacore.shared.domain.user.Name, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.user.Name) => void): $data.IPromise;
    first(predicate: (it: cfacore.shared.domain.user.Name, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.user.Name[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfacore.shared.domain.user.NameQueryable;
    withInlineCount(): cfacore.shared.domain.user.NameQueryable;
    withInlineCount(selector: string): cfacore.shared.domain.user.NameQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }

  class Zip extends $data.Entity {
    constructor ();
    constructor (initData: { PlusFour?: number; Code?: number; });
    PlusFour: number;
    Code: number;
    
  }

  export interface ZipQueryable extends $data.Queryable {
    filter(predicate:(it: cfacore.shared.domain.user.Zip) => bool): cfacore.shared.domain.user.ZipQueryable;
    filter(predicate:(it: cfacore.shared.domain.user.Zip) => bool, thisArg: any): cfacore.shared.domain.user.ZipQueryable;

    map(projection: (it: cfacore.shared.domain.user.Zip) => any): cfacore.shared.domain.user.ZipQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfacore.shared.domain.user.Zip) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfacore.shared.domain.user.Zip[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfacore.shared.domain.user.Zip[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfacore.shared.domain.user.Zip, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.user.Zip) => void): $data.IPromise;
    single(predicate: (it: cfacore.shared.domain.user.Zip, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.user.Zip[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfacore.shared.domain.user.ZipQueryable;
    skip(amout: number): cfacore.shared.domain.user.ZipQueryable;

    order(selector: string): cfacore.shared.domain.user.ZipQueryable;
    orderBy(predicate: (it: cfacore.shared.domain.user.Zip) => any): cfacore.shared.domain.user.ZipQueryable;
    orderByDescending(predicate: (it: cfacore.shared.domain.user.Zip) => any): cfacore.shared.domain.user.ZipQueryable;
    
    first(predicate: (it: cfacore.shared.domain.user.Zip, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.user.Zip) => void): $data.IPromise;
    first(predicate: (it: cfacore.shared.domain.user.Zip, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.user.Zip[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfacore.shared.domain.user.ZipQueryable;
    withInlineCount(): cfacore.shared.domain.user.ZipQueryable;
    withInlineCount(selector: string): cfacore.shared.domain.user.ZipQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }

  class Phone extends $data.Entity {
    constructor ();
    constructor (initData: { Number?: number; AreaCode?: number; Extension?: string; Carrier?: string; });
    Number: number;
    AreaCode: number;
    Extension: string;
    Carrier: string;
    
  }

  export interface PhoneQueryable extends $data.Queryable {
    filter(predicate:(it: cfacore.shared.domain.user.Phone) => bool): cfacore.shared.domain.user.PhoneQueryable;
    filter(predicate:(it: cfacore.shared.domain.user.Phone) => bool, thisArg: any): cfacore.shared.domain.user.PhoneQueryable;

    map(projection: (it: cfacore.shared.domain.user.Phone) => any): cfacore.shared.domain.user.PhoneQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfacore.shared.domain.user.Phone) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfacore.shared.domain.user.Phone[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfacore.shared.domain.user.Phone[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfacore.shared.domain.user.Phone, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.user.Phone) => void): $data.IPromise;
    single(predicate: (it: cfacore.shared.domain.user.Phone, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.user.Phone[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfacore.shared.domain.user.PhoneQueryable;
    skip(amout: number): cfacore.shared.domain.user.PhoneQueryable;

    order(selector: string): cfacore.shared.domain.user.PhoneQueryable;
    orderBy(predicate: (it: cfacore.shared.domain.user.Phone) => any): cfacore.shared.domain.user.PhoneQueryable;
    orderByDescending(predicate: (it: cfacore.shared.domain.user.Phone) => any): cfacore.shared.domain.user.PhoneQueryable;
    
    first(predicate: (it: cfacore.shared.domain.user.Phone, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.user.Phone) => void): $data.IPromise;
    first(predicate: (it: cfacore.shared.domain.user.Phone, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.user.Phone[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfacore.shared.domain.user.PhoneQueryable;
    withInlineCount(): cfacore.shared.domain.user.PhoneQueryable;
    withInlineCount(selector: string): cfacore.shared.domain.user.PhoneQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }

}

module cfares.domain.store {
  class ResStore extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface ResStoreQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain.store.ResStore) => bool): cfares.domain.store.ResStoreQueryable;
    filter(predicate:(it: cfares.domain.store.ResStore) => bool, thisArg: any): cfares.domain.store.ResStoreQueryable;

    map(projection: (it: cfares.domain.store.ResStore) => any): cfares.domain.store.ResStoreQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain.store.ResStore) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain.store.ResStore[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain.store.ResStore[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain.store.ResStore, params?: any) => bool, params?: any, handler?: (result: cfares.domain.store.ResStore) => void): $data.IPromise;
    single(predicate: (it: cfares.domain.store.ResStore, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain.store.ResStore[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain.store.ResStoreQueryable;
    skip(amout: number): cfares.domain.store.ResStoreQueryable;

    order(selector: string): cfares.domain.store.ResStoreQueryable;
    orderBy(predicate: (it: cfares.domain.store.ResStore) => any): cfares.domain.store.ResStoreQueryable;
    orderByDescending(predicate: (it: cfares.domain.store.ResStore) => any): cfares.domain.store.ResStoreQueryable;
    
    first(predicate: (it: cfares.domain.store.ResStore, params?: any) => bool, params?: any, handler?: (result: cfares.domain.store.ResStore) => void): $data.IPromise;
    first(predicate: (it: cfares.domain.store.ResStore, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain.store.ResStore[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain.store.ResStoreQueryable;
    withInlineCount(): cfares.domain.store.ResStoreQueryable;
    withInlineCount(selector: string): cfares.domain.store.ResStoreQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ResStoreSet extends ResStoreQueryable {
    add(initData: { }): cfares.domain.store.ResStore;
    add(item: cfares.domain.store.ResStore): cfares.domain.store.ResStore;

    attach(item: cfares.domain.store.ResStore): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain.store.ResStore): cfares.domain.store.ResStore;
    attachOrGet(item: { }): cfares.domain.store.ResStore;

    detach(item: cfares.domain.store.ResStore): void;
    detach(item: { }): void;

    remove(item: cfares.domain.store.ResStore): void;
    remove(item: { }): void;
    
    elementType: new (initData: { }) => cfares.domain.store.ResStore;
  }

}

module cfares.domain.user {
  class ResUser extends $data.Entity {
    constructor ();
    constructor (initData: { OperationRole?: number; Tickets?: cfares.domain._event.Ticket[]; });
    OperationRole: number;
    Tickets: cfares.domain._event.Ticket[];
    
  }

  export interface ResUserQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain.user.ResUser) => bool): cfares.domain.user.ResUserQueryable;
    filter(predicate:(it: cfares.domain.user.ResUser) => bool, thisArg: any): cfares.domain.user.ResUserQueryable;

    map(projection: (it: cfares.domain.user.ResUser) => any): cfares.domain.user.ResUserQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain.user.ResUser) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain.user.ResUser[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain.user.ResUser[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain.user.ResUser, params?: any) => bool, params?: any, handler?: (result: cfares.domain.user.ResUser) => void): $data.IPromise;
    single(predicate: (it: cfares.domain.user.ResUser, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain.user.ResUser[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain.user.ResUserQueryable;
    skip(amout: number): cfares.domain.user.ResUserQueryable;

    order(selector: string): cfares.domain.user.ResUserQueryable;
    orderBy(predicate: (it: cfares.domain.user.ResUser) => any): cfares.domain.user.ResUserQueryable;
    orderByDescending(predicate: (it: cfares.domain.user.ResUser) => any): cfares.domain.user.ResUserQueryable;
    
    first(predicate: (it: cfares.domain.user.ResUser, params?: any) => bool, params?: any, handler?: (result: cfares.domain.user.ResUser) => void): $data.IPromise;
    first(predicate: (it: cfares.domain.user.ResUser, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain.user.ResUser[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain.user.ResUserQueryable;
    withInlineCount(): cfares.domain.user.ResUserQueryable;
    withInlineCount(selector: string): cfares.domain.user.ResUserQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ResUserSet extends ResUserQueryable {
    add(initData: { OperationRole?: number; Tickets?: cfares.domain._event.Ticket[]; }): cfares.domain.user.ResUser;
    add(item: cfares.domain.user.ResUser): cfares.domain.user.ResUser;

    attach(item: cfares.domain.user.ResUser): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain.user.ResUser): cfares.domain.user.ResUser;
    attachOrGet(item: { }): cfares.domain.user.ResUser;

    detach(item: cfares.domain.user.ResUser): void;
    detach(item: { }): void;

    remove(item: cfares.domain.user.ResUser): void;
    remove(item: { }): void;
    
    elementType: new (initData: { OperationRole?: number; Tickets?: cfares.domain._event.Ticket[]; }) => cfares.domain.user.ResUser;
  }

  class ResAdmin extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface ResAdminQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain.user.ResAdmin) => bool): cfares.domain.user.ResAdminQueryable;
    filter(predicate:(it: cfares.domain.user.ResAdmin) => bool, thisArg: any): cfares.domain.user.ResAdminQueryable;

    map(projection: (it: cfares.domain.user.ResAdmin) => any): cfares.domain.user.ResAdminQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain.user.ResAdmin) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain.user.ResAdmin[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain.user.ResAdmin[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain.user.ResAdmin, params?: any) => bool, params?: any, handler?: (result: cfares.domain.user.ResAdmin) => void): $data.IPromise;
    single(predicate: (it: cfares.domain.user.ResAdmin, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain.user.ResAdmin[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain.user.ResAdminQueryable;
    skip(amout: number): cfares.domain.user.ResAdminQueryable;

    order(selector: string): cfares.domain.user.ResAdminQueryable;
    orderBy(predicate: (it: cfares.domain.user.ResAdmin) => any): cfares.domain.user.ResAdminQueryable;
    orderByDescending(predicate: (it: cfares.domain.user.ResAdmin) => any): cfares.domain.user.ResAdminQueryable;
    
    first(predicate: (it: cfares.domain.user.ResAdmin, params?: any) => bool, params?: any, handler?: (result: cfares.domain.user.ResAdmin) => void): $data.IPromise;
    first(predicate: (it: cfares.domain.user.ResAdmin, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain.user.ResAdmin[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain.user.ResAdminQueryable;
    withInlineCount(): cfares.domain.user.ResAdminQueryable;
    withInlineCount(selector: string): cfares.domain.user.ResAdminQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ResAdminSet extends ResAdminQueryable {
    add(initData: { }): cfares.domain.user.ResAdmin;
    add(item: cfares.domain.user.ResAdmin): cfares.domain.user.ResAdmin;

    attach(item: cfares.domain.user.ResAdmin): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain.user.ResAdmin): cfares.domain.user.ResAdmin;
    attachOrGet(item: { }): cfares.domain.user.ResAdmin;

    detach(item: cfares.domain.user.ResAdmin): void;
    detach(item: { }): void;

    remove(item: cfares.domain.user.ResAdmin): void;
    remove(item: { }): void;
    
    elementType: new (initData: { }) => cfares.domain.user.ResAdmin;
  }

  class OperatorResUser extends $data.Entity {
    constructor ();
    constructor (initData: { storeNumber?: number; employeeID?: number; });
    storeNumber: number;
    employeeID: number;
    
  }

  export interface OperatorResUserQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain.user.OperatorResUser) => bool): cfares.domain.user.OperatorResUserQueryable;
    filter(predicate:(it: cfares.domain.user.OperatorResUser) => bool, thisArg: any): cfares.domain.user.OperatorResUserQueryable;

    map(projection: (it: cfares.domain.user.OperatorResUser) => any): cfares.domain.user.OperatorResUserQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain.user.OperatorResUser) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain.user.OperatorResUser[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain.user.OperatorResUser[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain.user.OperatorResUser, params?: any) => bool, params?: any, handler?: (result: cfares.domain.user.OperatorResUser) => void): $data.IPromise;
    single(predicate: (it: cfares.domain.user.OperatorResUser, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain.user.OperatorResUser[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain.user.OperatorResUserQueryable;
    skip(amout: number): cfares.domain.user.OperatorResUserQueryable;

    order(selector: string): cfares.domain.user.OperatorResUserQueryable;
    orderBy(predicate: (it: cfares.domain.user.OperatorResUser) => any): cfares.domain.user.OperatorResUserQueryable;
    orderByDescending(predicate: (it: cfares.domain.user.OperatorResUser) => any): cfares.domain.user.OperatorResUserQueryable;
    
    first(predicate: (it: cfares.domain.user.OperatorResUser, params?: any) => bool, params?: any, handler?: (result: cfares.domain.user.OperatorResUser) => void): $data.IPromise;
    first(predicate: (it: cfares.domain.user.OperatorResUser, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain.user.OperatorResUser[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain.user.OperatorResUserQueryable;
    withInlineCount(): cfares.domain.user.OperatorResUserQueryable;
    withInlineCount(selector: string): cfares.domain.user.OperatorResUserQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface OperatorResUserSet extends OperatorResUserQueryable {
    add(initData: { storeNumber?: number; employeeID?: number; }): cfares.domain.user.OperatorResUser;
    add(item: cfares.domain.user.OperatorResUser): cfares.domain.user.OperatorResUser;

    attach(item: cfares.domain.user.OperatorResUser): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain.user.OperatorResUser): cfares.domain.user.OperatorResUser;
    attachOrGet(item: { }): cfares.domain.user.OperatorResUser;

    detach(item: cfares.domain.user.OperatorResUser): void;
    detach(item: { }): void;

    remove(item: cfares.domain.user.OperatorResUser): void;
    remove(item: { }): void;
    
    elementType: new (initData: { storeNumber?: number; employeeID?: number; }) => cfares.domain.user.OperatorResUser;
  }

}

module cfares.domain._event {
  class Schedule extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface ScheduleQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.Schedule) => bool): cfares.domain._event.ScheduleQueryable;
    filter(predicate:(it: cfares.domain._event.Schedule) => bool, thisArg: any): cfares.domain._event.ScheduleQueryable;

    map(projection: (it: cfares.domain._event.Schedule) => any): cfares.domain._event.ScheduleQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.Schedule) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.Schedule[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.Schedule[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.Schedule, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.Schedule) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.Schedule, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.Schedule[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.ScheduleQueryable;
    skip(amout: number): cfares.domain._event.ScheduleQueryable;

    order(selector: string): cfares.domain._event.ScheduleQueryable;
    orderBy(predicate: (it: cfares.domain._event.Schedule) => any): cfares.domain._event.ScheduleQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.Schedule) => any): cfares.domain._event.ScheduleQueryable;
    
    first(predicate: (it: cfares.domain._event.Schedule, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.Schedule) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.Schedule, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.Schedule[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.ScheduleQueryable;
    withInlineCount(): cfares.domain._event.ScheduleQueryable;
    withInlineCount(selector: string): cfares.domain._event.ScheduleQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ScheduleSet extends ScheduleQueryable {
    add(initData: { }): cfares.domain._event.Schedule;
    add(item: cfares.domain._event.Schedule): cfares.domain._event.Schedule;

    attach(item: cfares.domain._event.Schedule): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event.Schedule): cfares.domain._event.Schedule;
    attachOrGet(item: { }): cfares.domain._event.Schedule;

    detach(item: cfares.domain._event.Schedule): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event.Schedule): void;
    remove(item: { }): void;
    
    elementType: new (initData: { }) => cfares.domain._event.Schedule;
  }

  class Slot extends $data.Entity {
    constructor ();
    constructor (initData: { TicketsAvailable?: number; TotalTickets?: number; SlotId?: number; IsScheduled?: bool; Status?: string; Capacity?: number; Start?: Date; Cutoff?: Date; End?: Date; OccurrenceId?: string; ScheduleId?: number; });
    TicketsAvailable: number;
    TotalTickets: number;
    SlotId: number;
    IsScheduled: bool;
    Status: string;
    Capacity: number;
    Start: Date;
    Cutoff: Date;
    End: Date;
    OccurrenceId: string;
    ScheduleId: number;
    
  }

  export interface SlotQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.Slot) => bool): cfares.domain._event.SlotQueryable;
    filter(predicate:(it: cfares.domain._event.Slot) => bool, thisArg: any): cfares.domain._event.SlotQueryable;

    map(projection: (it: cfares.domain._event.Slot) => any): cfares.domain._event.SlotQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.Slot) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.Slot[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.Slot[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.Slot, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.Slot) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.Slot, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.Slot[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.SlotQueryable;
    skip(amout: number): cfares.domain._event.SlotQueryable;

    order(selector: string): cfares.domain._event.SlotQueryable;
    orderBy(predicate: (it: cfares.domain._event.Slot) => any): cfares.domain._event.SlotQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.Slot) => any): cfares.domain._event.SlotQueryable;
    
    first(predicate: (it: cfares.domain._event.Slot, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.Slot) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.Slot, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.Slot[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.SlotQueryable;
    withInlineCount(): cfares.domain._event.SlotQueryable;
    withInlineCount(selector: string): cfares.domain._event.SlotQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface SlotSet extends SlotQueryable {
    add(initData: { TicketsAvailable?: number; TotalTickets?: number; SlotId?: number; IsScheduled?: bool; Status?: string; Capacity?: number; Start?: Date; Cutoff?: Date; End?: Date; OccurrenceId?: string; ScheduleId?: number; }): cfares.domain._event.Slot;
    add(item: cfares.domain._event.Slot): cfares.domain._event.Slot;

    attach(item: cfares.domain._event.Slot): void;
    attach(item: { SlotId: number; }): void;
    attachOrGet(item: cfares.domain._event.Slot): cfares.domain._event.Slot;
    attachOrGet(item: { SlotId: number; }): cfares.domain._event.Slot;

    detach(item: cfares.domain._event.Slot): void;
    detach(item: { SlotId: number; }): void;

    remove(item: cfares.domain._event.Slot): void;
    remove(item: { SlotId: number; }): void;
    
    elementType: new (initData: { TicketsAvailable?: number; TotalTickets?: number; SlotId?: number; IsScheduled?: bool; Status?: string; Capacity?: number; Start?: Date; Cutoff?: Date; End?: Date; OccurrenceId?: string; ScheduleId?: number; }) => cfares.domain._event.Slot;
  }

  class Ticket extends $data.Entity {
    constructor ();
    constructor (initData: { Note?: string; SlotId?: number; OwnerId?: string; TicketId?: number; CreationSrc?: string; CardNumber?: number; Slot?: cfares.domain._event.Slot; Owner?: cfares.domain.user.ResUser; });
    Note: string;
    SlotId: number;
    OwnerId: string;
    TicketId: number;
    CreationSrc: string;
    CardNumber: number;
    Slot: cfares.domain._event.Slot;
    Owner: cfares.domain.user.ResUser;
    
  }

  export interface TicketQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.Ticket) => bool): cfares.domain._event.TicketQueryable;
    filter(predicate:(it: cfares.domain._event.Ticket) => bool, thisArg: any): cfares.domain._event.TicketQueryable;

    map(projection: (it: cfares.domain._event.Ticket) => any): cfares.domain._event.TicketQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.Ticket) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.Ticket[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.Ticket[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.Ticket, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.Ticket) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.Ticket, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.Ticket[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.TicketQueryable;
    skip(amout: number): cfares.domain._event.TicketQueryable;

    order(selector: string): cfares.domain._event.TicketQueryable;
    orderBy(predicate: (it: cfares.domain._event.Ticket) => any): cfares.domain._event.TicketQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.Ticket) => any): cfares.domain._event.TicketQueryable;
    
    first(predicate: (it: cfares.domain._event.Ticket, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.Ticket) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.Ticket, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.Ticket[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.TicketQueryable;
    withInlineCount(): cfares.domain._event.TicketQueryable;
    withInlineCount(selector: string): cfares.domain._event.TicketQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface TicketSet extends TicketQueryable {
    add(initData: { Note?: string; SlotId?: number; OwnerId?: string; TicketId?: number; CreationSrc?: string; CardNumber?: number; Slot?: cfares.domain._event.Slot; Owner?: cfares.domain.user.ResUser; }): cfares.domain._event.Ticket;
    add(item: cfares.domain._event.Ticket): cfares.domain._event.Ticket;

    attach(item: cfares.domain._event.Ticket): void;
    attach(item: { TicketId: number; }): void;
    attachOrGet(item: cfares.domain._event.Ticket): cfares.domain._event.Ticket;
    attachOrGet(item: { TicketId: number; }): cfares.domain._event.Ticket;

    detach(item: cfares.domain._event.Ticket): void;
    detach(item: { TicketId: number; }): void;

    remove(item: cfares.domain._event.Ticket): void;
    remove(item: { TicketId: number; }): void;
    
    elementType: new (initData: { Note?: string; SlotId?: number; OwnerId?: string; TicketId?: number; CreationSrc?: string; CardNumber?: number; Slot?: cfares.domain._event.Slot; Owner?: cfares.domain.user.ResUser; }) => cfares.domain._event.Ticket;
  }

  class Occurrence extends $data.Entity {
    constructor ();
    constructor (initData: { Start?: Date; End?: Date; SlotRangeStart?: Date; SlotRangeEnd?: Date; BoundToPrototype?: bool; GMTOffset?: System.TimeZoneInfo; OccurrenceId?: number; Status?: string; StatusId?: number; StoreId?: string; RegistrationAvailability?: cfacore.shared.domain._base.DateRange; SlotRange?: cfacore.shared.domain._base.DateRange; ResEvent?: cfares.domain._event.ResEvent; Slots?: cfares.domain._event.Slot[]; SlotsList?: cfares.domain._event.Slot[]; Tickets?: cfares.domain._event.Ticket[]; Store?: cfares.domain.store.ResStore; });
    Start: Date;
    End: Date;
    SlotRangeStart: Date;
    SlotRangeEnd: Date;
    BoundToPrototype: bool;
    GMTOffset: System.TimeZoneInfo;
    OccurrenceId: number;
    Status: string;
    StatusId: number;
    StoreId: string;
    RegistrationAvailability: cfacore.shared.domain._base.DateRange;
    SlotRange: cfacore.shared.domain._base.DateRange;
    ResEvent: cfares.domain._event.ResEvent;
    Slots: cfares.domain._event.Slot[];
    SlotsList: cfares.domain._event.Slot[];
    Tickets: cfares.domain._event.Ticket[];
    Store: cfares.domain.store.ResStore;
    
  }

  export interface OccurrenceQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.Occurrence) => bool): cfares.domain._event.OccurrenceQueryable;
    filter(predicate:(it: cfares.domain._event.Occurrence) => bool, thisArg: any): cfares.domain._event.OccurrenceQueryable;

    map(projection: (it: cfares.domain._event.Occurrence) => any): cfares.domain._event.OccurrenceQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.Occurrence) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.Occurrence[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.Occurrence[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.Occurrence, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.Occurrence) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.Occurrence, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.Occurrence[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.OccurrenceQueryable;
    skip(amout: number): cfares.domain._event.OccurrenceQueryable;

    order(selector: string): cfares.domain._event.OccurrenceQueryable;
    orderBy(predicate: (it: cfares.domain._event.Occurrence) => any): cfares.domain._event.OccurrenceQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.Occurrence) => any): cfares.domain._event.OccurrenceQueryable;
    
    first(predicate: (it: cfares.domain._event.Occurrence, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.Occurrence) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.Occurrence, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.Occurrence[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.OccurrenceQueryable;
    withInlineCount(): cfares.domain._event.OccurrenceQueryable;
    withInlineCount(selector: string): cfares.domain._event.OccurrenceQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface OccurrenceSet extends OccurrenceQueryable {
    add(initData: { Start?: Date; End?: Date; SlotRangeStart?: Date; SlotRangeEnd?: Date; BoundToPrototype?: bool; GMTOffset?: System.TimeZoneInfo; OccurrenceId?: number; Status?: string; StatusId?: number; StoreId?: string; RegistrationAvailability?: cfacore.shared.domain._base.DateRange; SlotRange?: cfacore.shared.domain._base.DateRange; ResEvent?: cfares.domain._event.ResEvent; Slots?: cfares.domain._event.Slot[]; SlotsList?: cfares.domain._event.Slot[]; Tickets?: cfares.domain._event.Ticket[]; Store?: cfares.domain.store.ResStore; }): cfares.domain._event.Occurrence;
    add(item: cfares.domain._event.Occurrence): cfares.domain._event.Occurrence;

    attach(item: cfares.domain._event.Occurrence): void;
    attach(item: { OccurrenceId: number; }): void;
    attachOrGet(item: cfares.domain._event.Occurrence): cfares.domain._event.Occurrence;
    attachOrGet(item: { OccurrenceId: number; }): cfares.domain._event.Occurrence;

    detach(item: cfares.domain._event.Occurrence): void;
    detach(item: { OccurrenceId: number; }): void;

    remove(item: cfares.domain._event.Occurrence): void;
    remove(item: { OccurrenceId: number; }): void;
    
    elementType: new (initData: { Start?: Date; End?: Date; SlotRangeStart?: Date; SlotRangeEnd?: Date; BoundToPrototype?: bool; GMTOffset?: System.TimeZoneInfo; OccurrenceId?: number; Status?: string; StatusId?: number; StoreId?: string; RegistrationAvailability?: cfacore.shared.domain._base.DateRange; SlotRange?: cfacore.shared.domain._base.DateRange; ResEvent?: cfares.domain._event.ResEvent; Slots?: cfares.domain._event.Slot[]; SlotsList?: cfares.domain._event.Slot[]; Tickets?: cfares.domain._event.Ticket[]; Store?: cfares.domain.store.ResStore; }) => cfares.domain._event.Occurrence;
  }

  class ResEvent extends $data.Entity {
    constructor ();
    constructor (initData: { RegistrationStart?: Date; RegistrationEnd?: Date; SiteStart?: Date; SiteEnd?: Date; UrlName?: string; Url?: string; Description?: string; TemplateName?: string; Status?: string; StatusId?: number; ResEventId?: number; Name?: string; OccurancesList?: cfares.domain._event.Occurrence[]; Occurances?: cfares.domain._event.Occurrence[]; Slots?: cfares.domain._event.Slot[]; ReservationType?: cfares.domain._event.ReservationType; Template?: cfares.domain._event.ResTemplate; ProtoOccurrence?: cfares.domain._event.Occurrence; });
    RegistrationStart: Date;
    RegistrationEnd: Date;
    SiteStart: Date;
    SiteEnd: Date;
    UrlName: string;
    Url: string;
    Description: string;
    TemplateName: string;
    Status: string;
    StatusId: number;
    ResEventId: number;
    Name: string;
    OccurancesList: cfares.domain._event.Occurrence[];
    Occurances: cfares.domain._event.Occurrence[];
    Slots: cfares.domain._event.Slot[];
    ReservationType: cfares.domain._event.ReservationType;
    Template: cfares.domain._event.ResTemplate;
    ProtoOccurrence: cfares.domain._event.Occurrence;
    
  }

  export interface ResEventQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.ResEvent) => bool): cfares.domain._event.ResEventQueryable;
    filter(predicate:(it: cfares.domain._event.ResEvent) => bool, thisArg: any): cfares.domain._event.ResEventQueryable;

    map(projection: (it: cfares.domain._event.ResEvent) => any): cfares.domain._event.ResEventQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.ResEvent) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.ResEvent[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.ResEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.ResEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.ResEvent) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.ResEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.ResEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.ResEventQueryable;
    skip(amout: number): cfares.domain._event.ResEventQueryable;

    order(selector: string): cfares.domain._event.ResEventQueryable;
    orderBy(predicate: (it: cfares.domain._event.ResEvent) => any): cfares.domain._event.ResEventQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.ResEvent) => any): cfares.domain._event.ResEventQueryable;
    
    first(predicate: (it: cfares.domain._event.ResEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.ResEvent) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.ResEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.ResEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.ResEventQueryable;
    withInlineCount(): cfares.domain._event.ResEventQueryable;
    withInlineCount(selector: string): cfares.domain._event.ResEventQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ResEventSet extends ResEventQueryable {
    add(initData: { RegistrationStart?: Date; RegistrationEnd?: Date; SiteStart?: Date; SiteEnd?: Date; UrlName?: string; Url?: string; Description?: string; TemplateName?: string; Status?: string; StatusId?: number; ResEventId?: number; Name?: string; OccurancesList?: cfares.domain._event.Occurrence[]; Occurances?: cfares.domain._event.Occurrence[]; Slots?: cfares.domain._event.Slot[]; ReservationType?: cfares.domain._event.ReservationType; Template?: cfares.domain._event.ResTemplate; ProtoOccurrence?: cfares.domain._event.Occurrence; }): cfares.domain._event.ResEvent;
    add(item: cfares.domain._event.ResEvent): cfares.domain._event.ResEvent;

    attach(item: cfares.domain._event.ResEvent): void;
    attach(item: { ResEventId: number; }): void;
    attachOrGet(item: cfares.domain._event.ResEvent): cfares.domain._event.ResEvent;
    attachOrGet(item: { ResEventId: number; }): cfares.domain._event.ResEvent;

    detach(item: cfares.domain._event.ResEvent): void;
    detach(item: { ResEventId: number; }): void;

    remove(item: cfares.domain._event.ResEvent): void;
    remove(item: { ResEventId: number; }): void;
    
    elementType: new (initData: { RegistrationStart?: Date; RegistrationEnd?: Date; SiteStart?: Date; SiteEnd?: Date; UrlName?: string; Url?: string; Description?: string; TemplateName?: string; Status?: string; StatusId?: number; ResEventId?: number; Name?: string; OccurancesList?: cfares.domain._event.Occurrence[]; Occurances?: cfares.domain._event.Occurrence[]; Slots?: cfares.domain._event.Slot[]; ReservationType?: cfares.domain._event.ReservationType; Template?: cfares.domain._event.ResTemplate; ProtoOccurrence?: cfares.domain._event.Occurrence; }) => cfares.domain._event.ResEvent;
  }

  class ResTemplate extends $data.Entity {
    constructor ();
    constructor (initData: { ResTemplateId?: string; Description?: string; Name?: string; BrowserMedia?: string; DefaultReservationTypeId?: string; Preview?: cfacore.shared.domain.media.Media; });
    ResTemplateId: string;
    Description: string;
    Name: string;
    BrowserMedia: string;
    DefaultReservationTypeId: string;
    Preview: cfacore.shared.domain.media.Media;
    
  }

  export interface ResTemplateQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.ResTemplate) => bool): cfares.domain._event.ResTemplateQueryable;
    filter(predicate:(it: cfares.domain._event.ResTemplate) => bool, thisArg: any): cfares.domain._event.ResTemplateQueryable;

    map(projection: (it: cfares.domain._event.ResTemplate) => any): cfares.domain._event.ResTemplateQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.ResTemplate) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.ResTemplate[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.ResTemplate[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.ResTemplate, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.ResTemplate) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.ResTemplate, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.ResTemplate[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.ResTemplateQueryable;
    skip(amout: number): cfares.domain._event.ResTemplateQueryable;

    order(selector: string): cfares.domain._event.ResTemplateQueryable;
    orderBy(predicate: (it: cfares.domain._event.ResTemplate) => any): cfares.domain._event.ResTemplateQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.ResTemplate) => any): cfares.domain._event.ResTemplateQueryable;
    
    first(predicate: (it: cfares.domain._event.ResTemplate, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.ResTemplate) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.ResTemplate, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.ResTemplate[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.ResTemplateQueryable;
    withInlineCount(): cfares.domain._event.ResTemplateQueryable;
    withInlineCount(selector: string): cfares.domain._event.ResTemplateQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ResTemplateSet extends ResTemplateQueryable {
    add(initData: { ResTemplateId?: string; Description?: string; Name?: string; BrowserMedia?: string; DefaultReservationTypeId?: string; Preview?: cfacore.shared.domain.media.Media; }): cfares.domain._event.ResTemplate;
    add(item: cfares.domain._event.ResTemplate): cfares.domain._event.ResTemplate;

    attach(item: cfares.domain._event.ResTemplate): void;
    attach(item: { ResTemplateId: string; }): void;
    attachOrGet(item: cfares.domain._event.ResTemplate): cfares.domain._event.ResTemplate;
    attachOrGet(item: { ResTemplateId: string; }): cfares.domain._event.ResTemplate;

    detach(item: cfares.domain._event.ResTemplate): void;
    detach(item: { ResTemplateId: string; }): void;

    remove(item: cfares.domain._event.ResTemplate): void;
    remove(item: { ResTemplateId: string; }): void;
    
    elementType: new (initData: { ResTemplateId?: string; Description?: string; Name?: string; BrowserMedia?: string; DefaultReservationTypeId?: string; Preview?: cfacore.shared.domain.media.Media; }) => cfares.domain._event.ResTemplate;
  }

  class ReservationType extends $data.Entity {
    constructor ();
    constructor (initData: { Description?: string; StrType?: string; Name?: string; UrlName?: string; ReservationTypeId?: string; });
    Description: string;
    StrType: string;
    Name: string;
    UrlName: string;
    ReservationTypeId: string;
    
  }

  export interface ReservationTypeQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.ReservationType) => bool): cfares.domain._event.ReservationTypeQueryable;
    filter(predicate:(it: cfares.domain._event.ReservationType) => bool, thisArg: any): cfares.domain._event.ReservationTypeQueryable;

    map(projection: (it: cfares.domain._event.ReservationType) => any): cfares.domain._event.ReservationTypeQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.ReservationType) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.ReservationType[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.ReservationType[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.ReservationType, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.ReservationType) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.ReservationType, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.ReservationType[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.ReservationTypeQueryable;
    skip(amout: number): cfares.domain._event.ReservationTypeQueryable;

    order(selector: string): cfares.domain._event.ReservationTypeQueryable;
    orderBy(predicate: (it: cfares.domain._event.ReservationType) => any): cfares.domain._event.ReservationTypeQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.ReservationType) => any): cfares.domain._event.ReservationTypeQueryable;
    
    first(predicate: (it: cfares.domain._event.ReservationType, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.ReservationType) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.ReservationType, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.ReservationType[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.ReservationTypeQueryable;
    withInlineCount(): cfares.domain._event.ReservationTypeQueryable;
    withInlineCount(selector: string): cfares.domain._event.ReservationTypeQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ReservationTypeSet extends ReservationTypeQueryable {
    add(initData: { Description?: string; StrType?: string; Name?: string; UrlName?: string; ReservationTypeId?: string; }): cfares.domain._event.ReservationType;
    add(item: cfares.domain._event.ReservationType): cfares.domain._event.ReservationType;

    attach(item: cfares.domain._event.ReservationType): void;
    attach(item: { ReservationTypeId: string; }): void;
    attachOrGet(item: cfares.domain._event.ReservationType): cfares.domain._event.ReservationType;
    attachOrGet(item: { ReservationTypeId: string; }): cfares.domain._event.ReservationType;

    detach(item: cfares.domain._event.ReservationType): void;
    detach(item: { ReservationTypeId: string; }): void;

    remove(item: cfares.domain._event.ReservationType): void;
    remove(item: { ReservationTypeId: string; }): void;
    
    elementType: new (initData: { Description?: string; StrType?: string; Name?: string; UrlName?: string; ReservationTypeId?: string; }) => cfares.domain._event.ReservationType;
  }

  class ExecutiveTourEvent extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface ExecutiveTourEventQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.ExecutiveTourEvent) => bool): cfares.domain._event.ExecutiveTourEventQueryable;
    filter(predicate:(it: cfares.domain._event.ExecutiveTourEvent) => bool, thisArg: any): cfares.domain._event.ExecutiveTourEventQueryable;

    map(projection: (it: cfares.domain._event.ExecutiveTourEvent) => any): cfares.domain._event.ExecutiveTourEventQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.ExecutiveTourEvent) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.ExecutiveTourEvent[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.ExecutiveTourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.ExecutiveTourEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.ExecutiveTourEvent) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.ExecutiveTourEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.ExecutiveTourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.ExecutiveTourEventQueryable;
    skip(amout: number): cfares.domain._event.ExecutiveTourEventQueryable;

    order(selector: string): cfares.domain._event.ExecutiveTourEventQueryable;
    orderBy(predicate: (it: cfares.domain._event.ExecutiveTourEvent) => any): cfares.domain._event.ExecutiveTourEventQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.ExecutiveTourEvent) => any): cfares.domain._event.ExecutiveTourEventQueryable;
    
    first(predicate: (it: cfares.domain._event.ExecutiveTourEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.ExecutiveTourEvent) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.ExecutiveTourEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.ExecutiveTourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.ExecutiveTourEventQueryable;
    withInlineCount(): cfares.domain._event.ExecutiveTourEventQueryable;
    withInlineCount(selector: string): cfares.domain._event.ExecutiveTourEventQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ExecutiveTourEventSet extends ExecutiveTourEventQueryable {
    add(initData: { }): cfares.domain._event.ExecutiveTourEvent;
    add(item: cfares.domain._event.ExecutiveTourEvent): cfares.domain._event.ExecutiveTourEvent;

    attach(item: cfares.domain._event.ExecutiveTourEvent): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event.ExecutiveTourEvent): cfares.domain._event.ExecutiveTourEvent;
    attachOrGet(item: { }): cfares.domain._event.ExecutiveTourEvent;

    detach(item: cfares.domain._event.ExecutiveTourEvent): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event.ExecutiveTourEvent): void;
    remove(item: { }): void;
    
    elementType: new (initData: { }) => cfares.domain._event.ExecutiveTourEvent;
  }

}

module cfares.domain._event.slot.tours {
  class TourSlot extends $data.Entity {
    constructor ();
    constructor (initData: { TourSlotId?: number; KidFriendly?: bool; SpecialNeeds?: string; });
    TourSlotId: number;
    KidFriendly: bool;
    SpecialNeeds: string;
    
  }

  export interface TourSlotQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.slot.tours.TourSlot) => bool): cfares.domain._event.slot.tours.TourSlotQueryable;
    filter(predicate:(it: cfares.domain._event.slot.tours.TourSlot) => bool, thisArg: any): cfares.domain._event.slot.tours.TourSlotQueryable;

    map(projection: (it: cfares.domain._event.slot.tours.TourSlot) => any): cfares.domain._event.slot.tours.TourSlotQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.slot.tours.TourSlot) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.slot.tours.TourSlot[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.slot.tours.TourSlot[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.slot.tours.TourSlot, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.slot.tours.TourSlot) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.slot.tours.TourSlot, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.slot.tours.TourSlot[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.slot.tours.TourSlotQueryable;
    skip(amout: number): cfares.domain._event.slot.tours.TourSlotQueryable;

    order(selector: string): cfares.domain._event.slot.tours.TourSlotQueryable;
    orderBy(predicate: (it: cfares.domain._event.slot.tours.TourSlot) => any): cfares.domain._event.slot.tours.TourSlotQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.slot.tours.TourSlot) => any): cfares.domain._event.slot.tours.TourSlotQueryable;
    
    first(predicate: (it: cfares.domain._event.slot.tours.TourSlot, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.slot.tours.TourSlot) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.slot.tours.TourSlot, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.slot.tours.TourSlot[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.slot.tours.TourSlotQueryable;
    withInlineCount(): cfares.domain._event.slot.tours.TourSlotQueryable;
    withInlineCount(selector: string): cfares.domain._event.slot.tours.TourSlotQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface TourSlotSet extends TourSlotQueryable {
    add(initData: { TourSlotId?: number; KidFriendly?: bool; SpecialNeeds?: string; }): cfares.domain._event.slot.tours.TourSlot;
    add(item: cfares.domain._event.slot.tours.TourSlot): cfares.domain._event.slot.tours.TourSlot;

    attach(item: cfares.domain._event.slot.tours.TourSlot): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event.slot.tours.TourSlot): cfares.domain._event.slot.tours.TourSlot;
    attachOrGet(item: { }): cfares.domain._event.slot.tours.TourSlot;

    detach(item: cfares.domain._event.slot.tours.TourSlot): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event.slot.tours.TourSlot): void;
    remove(item: { }): void;
    
    elementType: new (initData: { TourSlotId?: number; KidFriendly?: bool; SpecialNeeds?: string; }) => cfares.domain._event.slot.tours.TourSlot;
  }

  class StoryTourSlot extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface StoryTourSlotQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.slot.tours.StoryTourSlot) => bool): cfares.domain._event.slot.tours.StoryTourSlotQueryable;
    filter(predicate:(it: cfares.domain._event.slot.tours.StoryTourSlot) => bool, thisArg: any): cfares.domain._event.slot.tours.StoryTourSlotQueryable;

    map(projection: (it: cfares.domain._event.slot.tours.StoryTourSlot) => any): cfares.domain._event.slot.tours.StoryTourSlotQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.slot.tours.StoryTourSlot) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.slot.tours.StoryTourSlot[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.slot.tours.StoryTourSlot[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.slot.tours.StoryTourSlot, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.slot.tours.StoryTourSlot) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.slot.tours.StoryTourSlot, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.slot.tours.StoryTourSlot[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.slot.tours.StoryTourSlotQueryable;
    skip(amout: number): cfares.domain._event.slot.tours.StoryTourSlotQueryable;

    order(selector: string): cfares.domain._event.slot.tours.StoryTourSlotQueryable;
    orderBy(predicate: (it: cfares.domain._event.slot.tours.StoryTourSlot) => any): cfares.domain._event.slot.tours.StoryTourSlotQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.slot.tours.StoryTourSlot) => any): cfares.domain._event.slot.tours.StoryTourSlotQueryable;
    
    first(predicate: (it: cfares.domain._event.slot.tours.StoryTourSlot, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.slot.tours.StoryTourSlot) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.slot.tours.StoryTourSlot, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.slot.tours.StoryTourSlot[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.slot.tours.StoryTourSlotQueryable;
    withInlineCount(): cfares.domain._event.slot.tours.StoryTourSlotQueryable;
    withInlineCount(selector: string): cfares.domain._event.slot.tours.StoryTourSlotQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface StoryTourSlotSet extends StoryTourSlotQueryable {
    add(initData: { }): cfares.domain._event.slot.tours.StoryTourSlot;
    add(item: cfares.domain._event.slot.tours.StoryTourSlot): cfares.domain._event.slot.tours.StoryTourSlot;

    attach(item: cfares.domain._event.slot.tours.StoryTourSlot): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event.slot.tours.StoryTourSlot): cfares.domain._event.slot.tours.StoryTourSlot;
    attachOrGet(item: { }): cfares.domain._event.slot.tours.StoryTourSlot;

    detach(item: cfares.domain._event.slot.tours.StoryTourSlot): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event.slot.tours.StoryTourSlot): void;
    remove(item: { }): void;
    
    elementType: new (initData: { }) => cfares.domain._event.slot.tours.StoryTourSlot;
  }

  class LargeStoryTourSlot extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface LargeStoryTourSlotQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.slot.tours.LargeStoryTourSlot) => bool): cfares.domain._event.slot.tours.LargeStoryTourSlotQueryable;
    filter(predicate:(it: cfares.domain._event.slot.tours.LargeStoryTourSlot) => bool, thisArg: any): cfares.domain._event.slot.tours.LargeStoryTourSlotQueryable;

    map(projection: (it: cfares.domain._event.slot.tours.LargeStoryTourSlot) => any): cfares.domain._event.slot.tours.LargeStoryTourSlotQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.slot.tours.LargeStoryTourSlot) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.slot.tours.LargeStoryTourSlot[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.slot.tours.LargeStoryTourSlot[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.slot.tours.LargeStoryTourSlot, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.slot.tours.LargeStoryTourSlot) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.slot.tours.LargeStoryTourSlot, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.slot.tours.LargeStoryTourSlot[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.slot.tours.LargeStoryTourSlotQueryable;
    skip(amout: number): cfares.domain._event.slot.tours.LargeStoryTourSlotQueryable;

    order(selector: string): cfares.domain._event.slot.tours.LargeStoryTourSlotQueryable;
    orderBy(predicate: (it: cfares.domain._event.slot.tours.LargeStoryTourSlot) => any): cfares.domain._event.slot.tours.LargeStoryTourSlotQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.slot.tours.LargeStoryTourSlot) => any): cfares.domain._event.slot.tours.LargeStoryTourSlotQueryable;
    
    first(predicate: (it: cfares.domain._event.slot.tours.LargeStoryTourSlot, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.slot.tours.LargeStoryTourSlot) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.slot.tours.LargeStoryTourSlot, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.slot.tours.LargeStoryTourSlot[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.slot.tours.LargeStoryTourSlotQueryable;
    withInlineCount(): cfares.domain._event.slot.tours.LargeStoryTourSlotQueryable;
    withInlineCount(selector: string): cfares.domain._event.slot.tours.LargeStoryTourSlotQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface LargeStoryTourSlotSet extends LargeStoryTourSlotQueryable {
    add(initData: { }): cfares.domain._event.slot.tours.LargeStoryTourSlot;
    add(item: cfares.domain._event.slot.tours.LargeStoryTourSlot): cfares.domain._event.slot.tours.LargeStoryTourSlot;

    attach(item: cfares.domain._event.slot.tours.LargeStoryTourSlot): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event.slot.tours.LargeStoryTourSlot): cfares.domain._event.slot.tours.LargeStoryTourSlot;
    attachOrGet(item: { }): cfares.domain._event.slot.tours.LargeStoryTourSlot;

    detach(item: cfares.domain._event.slot.tours.LargeStoryTourSlot): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event.slot.tours.LargeStoryTourSlot): void;
    remove(item: { }): void;
    
    elementType: new (initData: { }) => cfares.domain._event.slot.tours.LargeStoryTourSlot;
  }

  class TeamTourSlot extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface TeamTourSlotQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.slot.tours.TeamTourSlot) => bool): cfares.domain._event.slot.tours.TeamTourSlotQueryable;
    filter(predicate:(it: cfares.domain._event.slot.tours.TeamTourSlot) => bool, thisArg: any): cfares.domain._event.slot.tours.TeamTourSlotQueryable;

    map(projection: (it: cfares.domain._event.slot.tours.TeamTourSlot) => any): cfares.domain._event.slot.tours.TeamTourSlotQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.slot.tours.TeamTourSlot) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.slot.tours.TeamTourSlot[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.slot.tours.TeamTourSlot[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.slot.tours.TeamTourSlot, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.slot.tours.TeamTourSlot) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.slot.tours.TeamTourSlot, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.slot.tours.TeamTourSlot[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.slot.tours.TeamTourSlotQueryable;
    skip(amout: number): cfares.domain._event.slot.tours.TeamTourSlotQueryable;

    order(selector: string): cfares.domain._event.slot.tours.TeamTourSlotQueryable;
    orderBy(predicate: (it: cfares.domain._event.slot.tours.TeamTourSlot) => any): cfares.domain._event.slot.tours.TeamTourSlotQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.slot.tours.TeamTourSlot) => any): cfares.domain._event.slot.tours.TeamTourSlotQueryable;
    
    first(predicate: (it: cfares.domain._event.slot.tours.TeamTourSlot, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.slot.tours.TeamTourSlot) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.slot.tours.TeamTourSlot, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.slot.tours.TeamTourSlot[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.slot.tours.TeamTourSlotQueryable;
    withInlineCount(): cfares.domain._event.slot.tours.TeamTourSlotQueryable;
    withInlineCount(selector: string): cfares.domain._event.slot.tours.TeamTourSlotQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface TeamTourSlotSet extends TeamTourSlotQueryable {
    add(initData: { }): cfares.domain._event.slot.tours.TeamTourSlot;
    add(item: cfares.domain._event.slot.tours.TeamTourSlot): cfares.domain._event.slot.tours.TeamTourSlot;

    attach(item: cfares.domain._event.slot.tours.TeamTourSlot): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event.slot.tours.TeamTourSlot): cfares.domain._event.slot.tours.TeamTourSlot;
    attachOrGet(item: { }): cfares.domain._event.slot.tours.TeamTourSlot;

    detach(item: cfares.domain._event.slot.tours.TeamTourSlot): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event.slot.tours.TeamTourSlot): void;
    remove(item: { }): void;
    
    elementType: new (initData: { }) => cfares.domain._event.slot.tours.TeamTourSlot;
  }

}

module cfares.domain._event._ticket.tours {
  class TourTicket extends $data.Entity {
    constructor ();
    constructor (initData: { GuestCount?: number; TourTicketId?: string; TotalCostOfLunches?: number; OptInForLunch?: bool; NumberOfAdultLunches?: number; NumberOfKidLunches?: number; NumberOfSpecialNeedLunches?: number; SpecialDietNeedsDescription?: string; VisitMarketing?: bool; VisitTech?: bool; VisitInnovation?: bool; VisitTraining?: bool; VisitWellness?: bool; VisitWareHouse?: bool; VisitIT?: bool; VisitOther?: bool; VisitOtherDescription?: string; HasSpecialNeeds?: bool; IsVisuallyImpaired?: bool; OtherNeeds?: bool; OtherNeedsDescription?: string; IsHearingImpaired?: bool; NeedsWheelChair?: bool; IsFamilyWithKids?: bool; IsSchoolGroup?: bool; IsFamilyWithoutKids?: bool; IsAdultGroup?: bool; IsReligiousGroup?: bool; IsSeniorGroup?: bool; IsBusinessGroup?: bool; IsRavingFans?: bool; IsTeamMemberGroup?: bool; IsOtherTypeOfGroup?: bool; OtherTypeDescription?: string; GroupName?: string; GuestList?: string; GuestNames?: cfacore.shared.domain.user.Name[]; AllGuestNames?: cfacore.shared.domain.user.Name[]; Guests?: cfares.domain.user.ResUser[]; });
    GuestCount: number;
    TourTicketId: string;
    TotalCostOfLunches: number;
    OptInForLunch: bool;
    NumberOfAdultLunches: number;
    NumberOfKidLunches: number;
    NumberOfSpecialNeedLunches: number;
    SpecialDietNeedsDescription: string;
    VisitMarketing: bool;
    VisitTech: bool;
    VisitInnovation: bool;
    VisitTraining: bool;
    VisitWellness: bool;
    VisitWareHouse: bool;
    VisitIT: bool;
    VisitOther: bool;
    VisitOtherDescription: string;
    HasSpecialNeeds: bool;
    IsVisuallyImpaired: bool;
    OtherNeeds: bool;
    OtherNeedsDescription: string;
    IsHearingImpaired: bool;
    NeedsWheelChair: bool;
    IsFamilyWithKids: bool;
    IsSchoolGroup: bool;
    IsFamilyWithoutKids: bool;
    IsAdultGroup: bool;
    IsReligiousGroup: bool;
    IsSeniorGroup: bool;
    IsBusinessGroup: bool;
    IsRavingFans: bool;
    IsTeamMemberGroup: bool;
    IsOtherTypeOfGroup: bool;
    OtherTypeDescription: string;
    GroupName: string;
    GuestList: string;
    GuestNames: cfacore.shared.domain.user.Name[];
    AllGuestNames: cfacore.shared.domain.user.Name[];
    Guests: cfares.domain.user.ResUser[];
    
  }

  export interface TourTicketQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event._ticket.tours.TourTicket) => bool): cfares.domain._event._ticket.tours.TourTicketQueryable;
    filter(predicate:(it: cfares.domain._event._ticket.tours.TourTicket) => bool, thisArg: any): cfares.domain._event._ticket.tours.TourTicketQueryable;

    map(projection: (it: cfares.domain._event._ticket.tours.TourTicket) => any): cfares.domain._event._ticket.tours.TourTicketQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event._ticket.tours.TourTicket) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event._ticket.tours.TourTicket[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event._ticket.tours.TourTicket[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event._ticket.tours.TourTicket, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event._ticket.tours.TourTicket) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event._ticket.tours.TourTicket, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event._ticket.tours.TourTicket[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event._ticket.tours.TourTicketQueryable;
    skip(amout: number): cfares.domain._event._ticket.tours.TourTicketQueryable;

    order(selector: string): cfares.domain._event._ticket.tours.TourTicketQueryable;
    orderBy(predicate: (it: cfares.domain._event._ticket.tours.TourTicket) => any): cfares.domain._event._ticket.tours.TourTicketQueryable;
    orderByDescending(predicate: (it: cfares.domain._event._ticket.tours.TourTicket) => any): cfares.domain._event._ticket.tours.TourTicketQueryable;
    
    first(predicate: (it: cfares.domain._event._ticket.tours.TourTicket, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event._ticket.tours.TourTicket) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event._ticket.tours.TourTicket, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event._ticket.tours.TourTicket[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event._ticket.tours.TourTicketQueryable;
    withInlineCount(): cfares.domain._event._ticket.tours.TourTicketQueryable;
    withInlineCount(selector: string): cfares.domain._event._ticket.tours.TourTicketQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface TourTicketSet extends TourTicketQueryable {
    add(initData: { GuestCount?: number; TourTicketId?: string; TotalCostOfLunches?: number; OptInForLunch?: bool; NumberOfAdultLunches?: number; NumberOfKidLunches?: number; NumberOfSpecialNeedLunches?: number; SpecialDietNeedsDescription?: string; VisitMarketing?: bool; VisitTech?: bool; VisitInnovation?: bool; VisitTraining?: bool; VisitWellness?: bool; VisitWareHouse?: bool; VisitIT?: bool; VisitOther?: bool; VisitOtherDescription?: string; HasSpecialNeeds?: bool; IsVisuallyImpaired?: bool; OtherNeeds?: bool; OtherNeedsDescription?: string; IsHearingImpaired?: bool; NeedsWheelChair?: bool; IsFamilyWithKids?: bool; IsSchoolGroup?: bool; IsFamilyWithoutKids?: bool; IsAdultGroup?: bool; IsReligiousGroup?: bool; IsSeniorGroup?: bool; IsBusinessGroup?: bool; IsRavingFans?: bool; IsTeamMemberGroup?: bool; IsOtherTypeOfGroup?: bool; OtherTypeDescription?: string; GroupName?: string; GuestList?: string; GuestNames?: cfacore.shared.domain.user.Name[]; AllGuestNames?: cfacore.shared.domain.user.Name[]; Guests?: cfares.domain.user.ResUser[]; }): cfares.domain._event._ticket.tours.TourTicket;
    add(item: cfares.domain._event._ticket.tours.TourTicket): cfares.domain._event._ticket.tours.TourTicket;

    attach(item: cfares.domain._event._ticket.tours.TourTicket): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event._ticket.tours.TourTicket): cfares.domain._event._ticket.tours.TourTicket;
    attachOrGet(item: { }): cfares.domain._event._ticket.tours.TourTicket;

    detach(item: cfares.domain._event._ticket.tours.TourTicket): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event._ticket.tours.TourTicket): void;
    remove(item: { }): void;
    
    elementType: new (initData: { GuestCount?: number; TourTicketId?: string; TotalCostOfLunches?: number; OptInForLunch?: bool; NumberOfAdultLunches?: number; NumberOfKidLunches?: number; NumberOfSpecialNeedLunches?: number; SpecialDietNeedsDescription?: string; VisitMarketing?: bool; VisitTech?: bool; VisitInnovation?: bool; VisitTraining?: bool; VisitWellness?: bool; VisitWareHouse?: bool; VisitIT?: bool; VisitOther?: bool; VisitOtherDescription?: string; HasSpecialNeeds?: bool; IsVisuallyImpaired?: bool; OtherNeeds?: bool; OtherNeedsDescription?: string; IsHearingImpaired?: bool; NeedsWheelChair?: bool; IsFamilyWithKids?: bool; IsSchoolGroup?: bool; IsFamilyWithoutKids?: bool; IsAdultGroup?: bool; IsReligiousGroup?: bool; IsSeniorGroup?: bool; IsBusinessGroup?: bool; IsRavingFans?: bool; IsTeamMemberGroup?: bool; IsOtherTypeOfGroup?: bool; OtherTypeDescription?: string; GroupName?: string; GuestList?: string; GuestNames?: cfacore.shared.domain.user.Name[]; AllGuestNames?: cfacore.shared.domain.user.Name[]; Guests?: cfares.domain.user.ResUser[]; }) => cfares.domain._event._ticket.tours.TourTicket;
  }

  class TeamTourTicket extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface TeamTourTicketQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event._ticket.tours.TeamTourTicket) => bool): cfares.domain._event._ticket.tours.TeamTourTicketQueryable;
    filter(predicate:(it: cfares.domain._event._ticket.tours.TeamTourTicket) => bool, thisArg: any): cfares.domain._event._ticket.tours.TeamTourTicketQueryable;

    map(projection: (it: cfares.domain._event._ticket.tours.TeamTourTicket) => any): cfares.domain._event._ticket.tours.TeamTourTicketQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event._ticket.tours.TeamTourTicket) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event._ticket.tours.TeamTourTicket[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event._ticket.tours.TeamTourTicket[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event._ticket.tours.TeamTourTicket, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event._ticket.tours.TeamTourTicket) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event._ticket.tours.TeamTourTicket, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event._ticket.tours.TeamTourTicket[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event._ticket.tours.TeamTourTicketQueryable;
    skip(amout: number): cfares.domain._event._ticket.tours.TeamTourTicketQueryable;

    order(selector: string): cfares.domain._event._ticket.tours.TeamTourTicketQueryable;
    orderBy(predicate: (it: cfares.domain._event._ticket.tours.TeamTourTicket) => any): cfares.domain._event._ticket.tours.TeamTourTicketQueryable;
    orderByDescending(predicate: (it: cfares.domain._event._ticket.tours.TeamTourTicket) => any): cfares.domain._event._ticket.tours.TeamTourTicketQueryable;
    
    first(predicate: (it: cfares.domain._event._ticket.tours.TeamTourTicket, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event._ticket.tours.TeamTourTicket) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event._ticket.tours.TeamTourTicket, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event._ticket.tours.TeamTourTicket[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event._ticket.tours.TeamTourTicketQueryable;
    withInlineCount(): cfares.domain._event._ticket.tours.TeamTourTicketQueryable;
    withInlineCount(selector: string): cfares.domain._event._ticket.tours.TeamTourTicketQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface TeamTourTicketSet extends TeamTourTicketQueryable {
    add(initData: { }): cfares.domain._event._ticket.tours.TeamTourTicket;
    add(item: cfares.domain._event._ticket.tours.TeamTourTicket): cfares.domain._event._ticket.tours.TeamTourTicket;

    attach(item: cfares.domain._event._ticket.tours.TeamTourTicket): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event._ticket.tours.TeamTourTicket): cfares.domain._event._ticket.tours.TeamTourTicket;
    attachOrGet(item: { }): cfares.domain._event._ticket.tours.TeamTourTicket;

    detach(item: cfares.domain._event._ticket.tours.TeamTourTicket): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event._ticket.tours.TeamTourTicket): void;
    remove(item: { }): void;
    
    elementType: new (initData: { }) => cfares.domain._event._ticket.tours.TeamTourTicket;
  }

}

module cfacore.shared.domain.media {
  class Media extends $data.Entity {
    constructor ();
    constructor (initData: { MediaUriStr?: string; IsSystem?: bool; Width?: number; Height?: number; Length?: number; Size?: number; CreationDate?: Date; FileSize?: number; Name?: string; Description?: string; MediaId?: number; });
    MediaUriStr: string;
    IsSystem: bool;
    Width: number;
    Height: number;
    Length: number;
    Size: number;
    CreationDate: Date;
    FileSize: number;
    Name: string;
    Description: string;
    MediaId: number;
    
  }

  export interface MediaQueryable extends $data.Queryable {
    filter(predicate:(it: cfacore.shared.domain.media.Media) => bool): cfacore.shared.domain.media.MediaQueryable;
    filter(predicate:(it: cfacore.shared.domain.media.Media) => bool, thisArg: any): cfacore.shared.domain.media.MediaQueryable;

    map(projection: (it: cfacore.shared.domain.media.Media) => any): cfacore.shared.domain.media.MediaQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfacore.shared.domain.media.Media) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfacore.shared.domain.media.Media[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfacore.shared.domain.media.Media[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfacore.shared.domain.media.Media, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.media.Media) => void): $data.IPromise;
    single(predicate: (it: cfacore.shared.domain.media.Media, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.media.Media[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfacore.shared.domain.media.MediaQueryable;
    skip(amout: number): cfacore.shared.domain.media.MediaQueryable;

    order(selector: string): cfacore.shared.domain.media.MediaQueryable;
    orderBy(predicate: (it: cfacore.shared.domain.media.Media) => any): cfacore.shared.domain.media.MediaQueryable;
    orderByDescending(predicate: (it: cfacore.shared.domain.media.Media) => any): cfacore.shared.domain.media.MediaQueryable;
    
    first(predicate: (it: cfacore.shared.domain.media.Media, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain.media.Media) => void): $data.IPromise;
    first(predicate: (it: cfacore.shared.domain.media.Media, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain.media.Media[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfacore.shared.domain.media.MediaQueryable;
    withInlineCount(): cfacore.shared.domain.media.MediaQueryable;
    withInlineCount(selector: string): cfacore.shared.domain.media.MediaQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface MediaSet extends MediaQueryable {
    add(initData: { MediaUriStr?: string; IsSystem?: bool; Width?: number; Height?: number; Length?: number; Size?: number; CreationDate?: Date; FileSize?: number; Name?: string; Description?: string; MediaId?: number; }): cfacore.shared.domain.media.Media;
    add(item: cfacore.shared.domain.media.Media): cfacore.shared.domain.media.Media;

    attach(item: cfacore.shared.domain.media.Media): void;
    attach(item: { MediaId: number; }): void;
    attachOrGet(item: cfacore.shared.domain.media.Media): cfacore.shared.domain.media.Media;
    attachOrGet(item: { MediaId: number; }): cfacore.shared.domain.media.Media;

    detach(item: cfacore.shared.domain.media.Media): void;
    detach(item: { MediaId: number; }): void;

    remove(item: cfacore.shared.domain.media.Media): void;
    remove(item: { MediaId: number; }): void;
    
    elementType: new (initData: { MediaUriStr?: string; IsSystem?: bool; Width?: number; Height?: number; Length?: number; Size?: number; CreationDate?: Date; FileSize?: number; Name?: string; Description?: string; MediaId?: number; }) => cfacore.shared.domain.media.Media;
  }

}

module cfacore.shared.domain._base {
  class DateRange extends $data.Entity {
    constructor ();
    constructor (initData: { Start?: Date; End?: Date; Span?: number; });
    Start: Date;
    End: Date;
    Span: number;
    
  }

  export interface DateRangeQueryable extends $data.Queryable {
    filter(predicate:(it: cfacore.shared.domain._base.DateRange) => bool): cfacore.shared.domain._base.DateRangeQueryable;
    filter(predicate:(it: cfacore.shared.domain._base.DateRange) => bool, thisArg: any): cfacore.shared.domain._base.DateRangeQueryable;

    map(projection: (it: cfacore.shared.domain._base.DateRange) => any): cfacore.shared.domain._base.DateRangeQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfacore.shared.domain._base.DateRange) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfacore.shared.domain._base.DateRange[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfacore.shared.domain._base.DateRange[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfacore.shared.domain._base.DateRange, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain._base.DateRange) => void): $data.IPromise;
    single(predicate: (it: cfacore.shared.domain._base.DateRange, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain._base.DateRange[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfacore.shared.domain._base.DateRangeQueryable;
    skip(amout: number): cfacore.shared.domain._base.DateRangeQueryable;

    order(selector: string): cfacore.shared.domain._base.DateRangeQueryable;
    orderBy(predicate: (it: cfacore.shared.domain._base.DateRange) => any): cfacore.shared.domain._base.DateRangeQueryable;
    orderByDescending(predicate: (it: cfacore.shared.domain._base.DateRange) => any): cfacore.shared.domain._base.DateRangeQueryable;
    
    first(predicate: (it: cfacore.shared.domain._base.DateRange, params?: any) => bool, params?: any, handler?: (result: cfacore.shared.domain._base.DateRange) => void): $data.IPromise;
    first(predicate: (it: cfacore.shared.domain._base.DateRange, params?: any) => bool, params?: any, handler?: { success?: (result: cfacore.shared.domain._base.DateRange[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfacore.shared.domain._base.DateRangeQueryable;
    withInlineCount(): cfacore.shared.domain._base.DateRangeQueryable;
    withInlineCount(selector: string): cfacore.shared.domain._base.DateRangeQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }

}

module System {
  class Uri extends $data.Entity {
    constructor ();
    constructor (initData: { Segments?: string[]; });
    Segments: string[];
    
  }

  export interface UriQueryable extends $data.Queryable {
    filter(predicate:(it: System.Uri) => bool): System.UriQueryable;
    filter(predicate:(it: System.Uri) => bool, thisArg: any): System.UriQueryable;

    map(projection: (it: System.Uri) => any): System.UriQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: System.Uri) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: System.Uri[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: System.Uri[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: System.Uri, params?: any) => bool, params?: any, handler?: (result: System.Uri) => void): $data.IPromise;
    single(predicate: (it: System.Uri, params?: any) => bool, params?: any, handler?: { success?: (result: System.Uri[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): System.UriQueryable;
    skip(amout: number): System.UriQueryable;

    order(selector: string): System.UriQueryable;
    orderBy(predicate: (it: System.Uri) => any): System.UriQueryable;
    orderByDescending(predicate: (it: System.Uri) => any): System.UriQueryable;
    
    first(predicate: (it: System.Uri, params?: any) => bool, params?: any, handler?: (result: System.Uri) => void): $data.IPromise;
    first(predicate: (it: System.Uri, params?: any) => bool, params?: any, handler?: { success?: (result: System.Uri[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): System.UriQueryable;
    withInlineCount(): System.UriQueryable;
    withInlineCount(selector: string): System.UriQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }

  class TimeZoneInfo extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface TimeZoneInfoQueryable extends $data.Queryable {
    filter(predicate:(it: System.TimeZoneInfo) => bool): System.TimeZoneInfoQueryable;
    filter(predicate:(it: System.TimeZoneInfo) => bool, thisArg: any): System.TimeZoneInfoQueryable;

    map(projection: (it: System.TimeZoneInfo) => any): System.TimeZoneInfoQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: System.TimeZoneInfo) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: System.TimeZoneInfo[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: System.TimeZoneInfo[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: System.TimeZoneInfo, params?: any) => bool, params?: any, handler?: (result: System.TimeZoneInfo) => void): $data.IPromise;
    single(predicate: (it: System.TimeZoneInfo, params?: any) => bool, params?: any, handler?: { success?: (result: System.TimeZoneInfo[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): System.TimeZoneInfoQueryable;
    skip(amout: number): System.TimeZoneInfoQueryable;

    order(selector: string): System.TimeZoneInfoQueryable;
    orderBy(predicate: (it: System.TimeZoneInfo) => any): System.TimeZoneInfoQueryable;
    orderByDescending(predicate: (it: System.TimeZoneInfo) => any): System.TimeZoneInfoQueryable;
    
    first(predicate: (it: System.TimeZoneInfo, params?: any) => bool, params?: any, handler?: (result: System.TimeZoneInfo) => void): $data.IPromise;
    first(predicate: (it: System.TimeZoneInfo, params?: any) => bool, params?: any, handler?: { success?: (result: System.TimeZoneInfo[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): System.TimeZoneInfoQueryable;
    withInlineCount(): System.TimeZoneInfoQueryable;
    withInlineCount(selector: string): System.TimeZoneInfoQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }

}

module cfares.domain._event.resevent.store {
  class StoreEvent extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface StoreEventQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.resevent.store.StoreEvent) => bool): cfares.domain._event.resevent.store.StoreEventQueryable;
    filter(predicate:(it: cfares.domain._event.resevent.store.StoreEvent) => bool, thisArg: any): cfares.domain._event.resevent.store.StoreEventQueryable;

    map(projection: (it: cfares.domain._event.resevent.store.StoreEvent) => any): cfares.domain._event.resevent.store.StoreEventQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.resevent.store.StoreEvent) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.resevent.store.StoreEvent[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.resevent.store.StoreEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.resevent.store.StoreEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.resevent.store.StoreEvent) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.resevent.store.StoreEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.resevent.store.StoreEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.resevent.store.StoreEventQueryable;
    skip(amout: number): cfares.domain._event.resevent.store.StoreEventQueryable;

    order(selector: string): cfares.domain._event.resevent.store.StoreEventQueryable;
    orderBy(predicate: (it: cfares.domain._event.resevent.store.StoreEvent) => any): cfares.domain._event.resevent.store.StoreEventQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.resevent.store.StoreEvent) => any): cfares.domain._event.resevent.store.StoreEventQueryable;
    
    first(predicate: (it: cfares.domain._event.resevent.store.StoreEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.resevent.store.StoreEvent) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.resevent.store.StoreEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.resevent.store.StoreEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.resevent.store.StoreEventQueryable;
    withInlineCount(): cfares.domain._event.resevent.store.StoreEventQueryable;
    withInlineCount(selector: string): cfares.domain._event.resevent.store.StoreEventQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface StoreEventSet extends StoreEventQueryable {
    add(initData: { }): cfares.domain._event.resevent.store.StoreEvent;
    add(item: cfares.domain._event.resevent.store.StoreEvent): cfares.domain._event.resevent.store.StoreEvent;

    attach(item: cfares.domain._event.resevent.store.StoreEvent): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event.resevent.store.StoreEvent): cfares.domain._event.resevent.store.StoreEvent;
    attachOrGet(item: { }): cfares.domain._event.resevent.store.StoreEvent;

    detach(item: cfares.domain._event.resevent.store.StoreEvent): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event.resevent.store.StoreEvent): void;
    remove(item: { }): void;
    
    elementType: new (initData: { }) => cfares.domain._event.resevent.store.StoreEvent;
  }

  class GiveawayEvent extends $data.Entity {
    constructor ();
    constructor (initData: { AllowedProducts?: cfares.domain._event.menu.MenuItem[]; });
    AllowedProducts: cfares.domain._event.menu.MenuItem[];
    
  }

  export interface GiveawayEventQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.resevent.store.GiveawayEvent) => bool): cfares.domain._event.resevent.store.GiveawayEventQueryable;
    filter(predicate:(it: cfares.domain._event.resevent.store.GiveawayEvent) => bool, thisArg: any): cfares.domain._event.resevent.store.GiveawayEventQueryable;

    map(projection: (it: cfares.domain._event.resevent.store.GiveawayEvent) => any): cfares.domain._event.resevent.store.GiveawayEventQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.resevent.store.GiveawayEvent) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.resevent.store.GiveawayEvent[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.resevent.store.GiveawayEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.resevent.store.GiveawayEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.resevent.store.GiveawayEvent) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.resevent.store.GiveawayEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.resevent.store.GiveawayEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.resevent.store.GiveawayEventQueryable;
    skip(amout: number): cfares.domain._event.resevent.store.GiveawayEventQueryable;

    order(selector: string): cfares.domain._event.resevent.store.GiveawayEventQueryable;
    orderBy(predicate: (it: cfares.domain._event.resevent.store.GiveawayEvent) => any): cfares.domain._event.resevent.store.GiveawayEventQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.resevent.store.GiveawayEvent) => any): cfares.domain._event.resevent.store.GiveawayEventQueryable;
    
    first(predicate: (it: cfares.domain._event.resevent.store.GiveawayEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.resevent.store.GiveawayEvent) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.resevent.store.GiveawayEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.resevent.store.GiveawayEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.resevent.store.GiveawayEventQueryable;
    withInlineCount(): cfares.domain._event.resevent.store.GiveawayEventQueryable;
    withInlineCount(selector: string): cfares.domain._event.resevent.store.GiveawayEventQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface GiveawayEventSet extends GiveawayEventQueryable {
    add(initData: { AllowedProducts?: cfares.domain._event.menu.MenuItem[]; }): cfares.domain._event.resevent.store.GiveawayEvent;
    add(item: cfares.domain._event.resevent.store.GiveawayEvent): cfares.domain._event.resevent.store.GiveawayEvent;

    attach(item: cfares.domain._event.resevent.store.GiveawayEvent): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event.resevent.store.GiveawayEvent): cfares.domain._event.resevent.store.GiveawayEvent;
    attachOrGet(item: { }): cfares.domain._event.resevent.store.GiveawayEvent;

    detach(item: cfares.domain._event.resevent.store.GiveawayEvent): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event.resevent.store.GiveawayEvent): void;
    remove(item: { }): void;
    
    elementType: new (initData: { AllowedProducts?: cfares.domain._event.menu.MenuItem[]; }) => cfares.domain._event.resevent.store.GiveawayEvent;
  }

}

module cfares.domain._event.menu {
  class MenuItem extends $data.Entity {
    constructor ();
    constructor (initData: { MenuItemId?: number; DomId?: string; Name?: string; ImageUrl?: string; ShortName?: string; URLName?: string; AppliedEvents?: cfares.domain._event.resevent.store.GiveawayEvent[]; });
    MenuItemId: number;
    DomId: string;
    Name: string;
    ImageUrl: string;
    ShortName: string;
    URLName: string;
    AppliedEvents: cfares.domain._event.resevent.store.GiveawayEvent[];
    
  }

  export interface MenuItemQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.menu.MenuItem) => bool): cfares.domain._event.menu.MenuItemQueryable;
    filter(predicate:(it: cfares.domain._event.menu.MenuItem) => bool, thisArg: any): cfares.domain._event.menu.MenuItemQueryable;

    map(projection: (it: cfares.domain._event.menu.MenuItem) => any): cfares.domain._event.menu.MenuItemQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.menu.MenuItem) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.menu.MenuItem[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.menu.MenuItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.menu.MenuItem, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.menu.MenuItem) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.menu.MenuItem, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.menu.MenuItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.menu.MenuItemQueryable;
    skip(amout: number): cfares.domain._event.menu.MenuItemQueryable;

    order(selector: string): cfares.domain._event.menu.MenuItemQueryable;
    orderBy(predicate: (it: cfares.domain._event.menu.MenuItem) => any): cfares.domain._event.menu.MenuItemQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.menu.MenuItem) => any): cfares.domain._event.menu.MenuItemQueryable;
    
    first(predicate: (it: cfares.domain._event.menu.MenuItem, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.menu.MenuItem) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.menu.MenuItem, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.menu.MenuItem[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.menu.MenuItemQueryable;
    withInlineCount(): cfares.domain._event.menu.MenuItemQueryable;
    withInlineCount(selector: string): cfares.domain._event.menu.MenuItemQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface MenuItemSet extends MenuItemQueryable {
    add(initData: { MenuItemId?: number; DomId?: string; Name?: string; ImageUrl?: string; ShortName?: string; URLName?: string; AppliedEvents?: cfares.domain._event.resevent.store.GiveawayEvent[]; }): cfares.domain._event.menu.MenuItem;
    add(item: cfares.domain._event.menu.MenuItem): cfares.domain._event.menu.MenuItem;

    attach(item: cfares.domain._event.menu.MenuItem): void;
    attach(item: { MenuItemId: number; }): void;
    attachOrGet(item: cfares.domain._event.menu.MenuItem): cfares.domain._event.menu.MenuItem;
    attachOrGet(item: { MenuItemId: number; }): cfares.domain._event.menu.MenuItem;

    detach(item: cfares.domain._event.menu.MenuItem): void;
    detach(item: { MenuItemId: number; }): void;

    remove(item: cfares.domain._event.menu.MenuItem): void;
    remove(item: { MenuItemId: number; }): void;
    
    elementType: new (initData: { MenuItemId?: number; DomId?: string; Name?: string; ImageUrl?: string; ShortName?: string; URLName?: string; AppliedEvents?: cfares.domain._event.resevent.store.GiveawayEvent[]; }) => cfares.domain._event.menu.MenuItem;
  }

}

module cfares.domain._event.resevent.tours {
  class TourEvent extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface TourEventQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.resevent.tours.TourEvent) => bool): cfares.domain._event.resevent.tours.TourEventQueryable;
    filter(predicate:(it: cfares.domain._event.resevent.tours.TourEvent) => bool, thisArg: any): cfares.domain._event.resevent.tours.TourEventQueryable;

    map(projection: (it: cfares.domain._event.resevent.tours.TourEvent) => any): cfares.domain._event.resevent.tours.TourEventQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.resevent.tours.TourEvent) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.resevent.tours.TourEvent[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.resevent.tours.TourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.resevent.tours.TourEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.resevent.tours.TourEvent) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.resevent.tours.TourEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.resevent.tours.TourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.resevent.tours.TourEventQueryable;
    skip(amout: number): cfares.domain._event.resevent.tours.TourEventQueryable;

    order(selector: string): cfares.domain._event.resevent.tours.TourEventQueryable;
    orderBy(predicate: (it: cfares.domain._event.resevent.tours.TourEvent) => any): cfares.domain._event.resevent.tours.TourEventQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.resevent.tours.TourEvent) => any): cfares.domain._event.resevent.tours.TourEventQueryable;
    
    first(predicate: (it: cfares.domain._event.resevent.tours.TourEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.resevent.tours.TourEvent) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.resevent.tours.TourEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.resevent.tours.TourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.resevent.tours.TourEventQueryable;
    withInlineCount(): cfares.domain._event.resevent.tours.TourEventQueryable;
    withInlineCount(selector: string): cfares.domain._event.resevent.tours.TourEventQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface TourEventSet extends TourEventQueryable {
    add(initData: { }): cfares.domain._event.resevent.tours.TourEvent;
    add(item: cfares.domain._event.resevent.tours.TourEvent): cfares.domain._event.resevent.tours.TourEvent;

    attach(item: cfares.domain._event.resevent.tours.TourEvent): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event.resevent.tours.TourEvent): cfares.domain._event.resevent.tours.TourEvent;
    attachOrGet(item: { }): cfares.domain._event.resevent.tours.TourEvent;

    detach(item: cfares.domain._event.resevent.tours.TourEvent): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event.resevent.tours.TourEvent): void;
    remove(item: { }): void;
    
    elementType: new (initData: { }) => cfares.domain._event.resevent.tours.TourEvent;
  }

  class StoryTourEvent extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface StoryTourEventQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.resevent.tours.StoryTourEvent) => bool): cfares.domain._event.resevent.tours.StoryTourEventQueryable;
    filter(predicate:(it: cfares.domain._event.resevent.tours.StoryTourEvent) => bool, thisArg: any): cfares.domain._event.resevent.tours.StoryTourEventQueryable;

    map(projection: (it: cfares.domain._event.resevent.tours.StoryTourEvent) => any): cfares.domain._event.resevent.tours.StoryTourEventQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.resevent.tours.StoryTourEvent) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.resevent.tours.StoryTourEvent[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.resevent.tours.StoryTourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.resevent.tours.StoryTourEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.resevent.tours.StoryTourEvent) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.resevent.tours.StoryTourEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.resevent.tours.StoryTourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.resevent.tours.StoryTourEventQueryable;
    skip(amout: number): cfares.domain._event.resevent.tours.StoryTourEventQueryable;

    order(selector: string): cfares.domain._event.resevent.tours.StoryTourEventQueryable;
    orderBy(predicate: (it: cfares.domain._event.resevent.tours.StoryTourEvent) => any): cfares.domain._event.resevent.tours.StoryTourEventQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.resevent.tours.StoryTourEvent) => any): cfares.domain._event.resevent.tours.StoryTourEventQueryable;
    
    first(predicate: (it: cfares.domain._event.resevent.tours.StoryTourEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.resevent.tours.StoryTourEvent) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.resevent.tours.StoryTourEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.resevent.tours.StoryTourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.resevent.tours.StoryTourEventQueryable;
    withInlineCount(): cfares.domain._event.resevent.tours.StoryTourEventQueryable;
    withInlineCount(selector: string): cfares.domain._event.resevent.tours.StoryTourEventQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface StoryTourEventSet extends StoryTourEventQueryable {
    add(initData: { }): cfares.domain._event.resevent.tours.StoryTourEvent;
    add(item: cfares.domain._event.resevent.tours.StoryTourEvent): cfares.domain._event.resevent.tours.StoryTourEvent;

    attach(item: cfares.domain._event.resevent.tours.StoryTourEvent): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event.resevent.tours.StoryTourEvent): cfares.domain._event.resevent.tours.StoryTourEvent;
    attachOrGet(item: { }): cfares.domain._event.resevent.tours.StoryTourEvent;

    detach(item: cfares.domain._event.resevent.tours.StoryTourEvent): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event.resevent.tours.StoryTourEvent): void;
    remove(item: { }): void;
    
    elementType: new (initData: { }) => cfares.domain._event.resevent.tours.StoryTourEvent;
  }

  class LargeStoryTourEvent extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface LargeStoryTourEventQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.resevent.tours.LargeStoryTourEvent) => bool): cfares.domain._event.resevent.tours.LargeStoryTourEventQueryable;
    filter(predicate:(it: cfares.domain._event.resevent.tours.LargeStoryTourEvent) => bool, thisArg: any): cfares.domain._event.resevent.tours.LargeStoryTourEventQueryable;

    map(projection: (it: cfares.domain._event.resevent.tours.LargeStoryTourEvent) => any): cfares.domain._event.resevent.tours.LargeStoryTourEventQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.resevent.tours.LargeStoryTourEvent) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.resevent.tours.LargeStoryTourEvent[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.resevent.tours.LargeStoryTourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.resevent.tours.LargeStoryTourEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.resevent.tours.LargeStoryTourEvent) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.resevent.tours.LargeStoryTourEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.resevent.tours.LargeStoryTourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.resevent.tours.LargeStoryTourEventQueryable;
    skip(amout: number): cfares.domain._event.resevent.tours.LargeStoryTourEventQueryable;

    order(selector: string): cfares.domain._event.resevent.tours.LargeStoryTourEventQueryable;
    orderBy(predicate: (it: cfares.domain._event.resevent.tours.LargeStoryTourEvent) => any): cfares.domain._event.resevent.tours.LargeStoryTourEventQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.resevent.tours.LargeStoryTourEvent) => any): cfares.domain._event.resevent.tours.LargeStoryTourEventQueryable;
    
    first(predicate: (it: cfares.domain._event.resevent.tours.LargeStoryTourEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.resevent.tours.LargeStoryTourEvent) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.resevent.tours.LargeStoryTourEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.resevent.tours.LargeStoryTourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.resevent.tours.LargeStoryTourEventQueryable;
    withInlineCount(): cfares.domain._event.resevent.tours.LargeStoryTourEventQueryable;
    withInlineCount(selector: string): cfares.domain._event.resevent.tours.LargeStoryTourEventQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface LargeStoryTourEventSet extends LargeStoryTourEventQueryable {
    add(initData: { }): cfares.domain._event.resevent.tours.LargeStoryTourEvent;
    add(item: cfares.domain._event.resevent.tours.LargeStoryTourEvent): cfares.domain._event.resevent.tours.LargeStoryTourEvent;

    attach(item: cfares.domain._event.resevent.tours.LargeStoryTourEvent): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event.resevent.tours.LargeStoryTourEvent): cfares.domain._event.resevent.tours.LargeStoryTourEvent;
    attachOrGet(item: { }): cfares.domain._event.resevent.tours.LargeStoryTourEvent;

    detach(item: cfares.domain._event.resevent.tours.LargeStoryTourEvent): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event.resevent.tours.LargeStoryTourEvent): void;
    remove(item: { }): void;
    
    elementType: new (initData: { }) => cfares.domain._event.resevent.tours.LargeStoryTourEvent;
  }

  class TeamTourEvent extends $data.Entity {
    constructor ();
    constructor (initData: { });
    
  }

  export interface TeamTourEventQueryable extends $data.Queryable {
    filter(predicate:(it: cfares.domain._event.resevent.tours.TeamTourEvent) => bool): cfares.domain._event.resevent.tours.TeamTourEventQueryable;
    filter(predicate:(it: cfares.domain._event.resevent.tours.TeamTourEvent) => bool, thisArg: any): cfares.domain._event.resevent.tours.TeamTourEventQueryable;

    map(projection: (it: cfares.domain._event.resevent.tours.TeamTourEvent) => any): cfares.domain._event.resevent.tours.TeamTourEventQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: cfares.domain._event.resevent.tours.TeamTourEvent) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: cfares.domain._event.resevent.tours.TeamTourEvent[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: cfares.domain._event.resevent.tours.TeamTourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: cfares.domain._event.resevent.tours.TeamTourEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.resevent.tours.TeamTourEvent) => void): $data.IPromise;
    single(predicate: (it: cfares.domain._event.resevent.tours.TeamTourEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.resevent.tours.TeamTourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): cfares.domain._event.resevent.tours.TeamTourEventQueryable;
    skip(amout: number): cfares.domain._event.resevent.tours.TeamTourEventQueryable;

    order(selector: string): cfares.domain._event.resevent.tours.TeamTourEventQueryable;
    orderBy(predicate: (it: cfares.domain._event.resevent.tours.TeamTourEvent) => any): cfares.domain._event.resevent.tours.TeamTourEventQueryable;
    orderByDescending(predicate: (it: cfares.domain._event.resevent.tours.TeamTourEvent) => any): cfares.domain._event.resevent.tours.TeamTourEventQueryable;
    
    first(predicate: (it: cfares.domain._event.resevent.tours.TeamTourEvent, params?: any) => bool, params?: any, handler?: (result: cfares.domain._event.resevent.tours.TeamTourEvent) => void): $data.IPromise;
    first(predicate: (it: cfares.domain._event.resevent.tours.TeamTourEvent, params?: any) => bool, params?: any, handler?: { success?: (result: cfares.domain._event.resevent.tours.TeamTourEvent[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): cfares.domain._event.resevent.tours.TeamTourEventQueryable;
    withInlineCount(): cfares.domain._event.resevent.tours.TeamTourEventQueryable;
    withInlineCount(selector: string): cfares.domain._event.resevent.tours.TeamTourEventQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface TeamTourEventSet extends TeamTourEventQueryable {
    add(initData: { }): cfares.domain._event.resevent.tours.TeamTourEvent;
    add(item: cfares.domain._event.resevent.tours.TeamTourEvent): cfares.domain._event.resevent.tours.TeamTourEvent;

    attach(item: cfares.domain._event.resevent.tours.TeamTourEvent): void;
    attach(item: { }): void;
    attachOrGet(item: cfares.domain._event.resevent.tours.TeamTourEvent): cfares.domain._event.resevent.tours.TeamTourEvent;
    attachOrGet(item: { }): cfares.domain._event.resevent.tours.TeamTourEvent;

    detach(item: cfares.domain._event.resevent.tours.TeamTourEvent): void;
    detach(item: { }): void;

    remove(item: cfares.domain._event.resevent.tours.TeamTourEvent): void;
    remove(item: { }): void;
    
    elementType: new (initData: { }) => cfares.domain._event.resevent.tours.TeamTourEvent;
  }

}

module Default {
  export class Container extends $data.EntityContext {
    onReady(): $data.IPromise;
    onReady(handler: (context: Container) => void): $data.IPromise;
    Store: cfacore.shared.domain.store.StoreSet;
    ResStore: cfares.domain.store.ResStoreSet;
    Address: cfacore.shared.domain.user.AddressSet;
    User: cfacore.domain.user.UserSet;
    ResUser: cfares.domain.user.ResUserSet;
    Distributor: cfacore.shared.domain.store.DistributorSet;
    Schedule: cfares.domain._event.ScheduleSet;
    Slot: cfares.domain._event.SlotSet;
    Ticket: cfares.domain._event.TicketSet;
    TourSlot: cfares.domain._event.slot.tours.TourSlotSet;
    TourTicket: cfares.domain._event._ticket.tours.TourTicketSet;
    Occurrence: cfares.domain._event.OccurrenceSet;
    Event: cfares.domain._event.ResEventSet;
    Media: cfacore.shared.domain.media.MediaSet;
    Template: cfares.domain._event.ResTemplateSet;
    ReservationType: cfares.domain._event.ReservationTypeSet;
    
  }
}
