///<reference path="./jaydata.d.ts" />
/*//////////////////////////////////////////////////////////////////////////////////////
////// Autogenerated by JaySvcUtil.exe http://JayData.org for more info        /////////
//////                      oData V3 TypeScript                                /////////
//////////////////////////////////////////////////////////////////////////////////////*/


module StoriesEntityModel {
  class V2StoryImageAuthorWithTagRating extends $data.Entity {
    constructor ();
    constructor (initData: { ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; StoryRating?: number; NumberOfRatings?: number; TagDescription?: string; Quality?: number; IsFavorite?: number; NewID?: $data.Guid; });
    ID: number;
    Title: string;
    StoryContent: string;
    AuthorID: number;
    ImageID: number;
    PostingDate: Date;
    CurrentEntryID: number;
    StoryVersion: number;
    EditorID: number;
    ReviewApproval: bool;
    FinalApproval: bool;
    Reviewed: bool;
    Views: number;
    CategoryID: number;
    IsDraft: bool;
    IsUnusable: bool;
    Comment: string;
    ReviewUnsure: bool;
    IsUnusableNegative: bool;
    FileName: string;
    Owner: string;
    Poster: number;
    Width: number;
    Height: number;
    MdWidth: number;
    MdHeight: number;
    LgWidth: number;
    LgHeight: number;
    PromoWidth: number;
    PromoHeight: number;
    StoryRating: number;
    NumberOfRatings: number;
    TagDescription: string;
    Quality: number;
    IsFavorite: number;
    NewID: $data.Guid;
    
  }

  export interface V2StoryImageAuthorWithTagRatingQueryable extends $data.Queryable {
    filter(predicate:(it: StoriesEntityModel.V2StoryImageAuthorWithTagRating) => bool): StoriesEntityModel.V2StoryImageAuthorWithTagRatingQueryable;
    filter(predicate:(it: StoriesEntityModel.V2StoryImageAuthorWithTagRating) => bool, thisArg: any): StoriesEntityModel.V2StoryImageAuthorWithTagRatingQueryable;

    map(projection: (it: StoriesEntityModel.V2StoryImageAuthorWithTagRating) => any): StoriesEntityModel.V2StoryImageAuthorWithTagRatingQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: StoriesEntityModel.V2StoryImageAuthorWithTagRating) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: StoriesEntityModel.V2StoryImageAuthorWithTagRating[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: StoriesEntityModel.V2StoryImageAuthorWithTagRating[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: StoriesEntityModel.V2StoryImageAuthorWithTagRating, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.V2StoryImageAuthorWithTagRating) => void): $data.IPromise;
    single(predicate: (it: StoriesEntityModel.V2StoryImageAuthorWithTagRating, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.V2StoryImageAuthorWithTagRating[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): StoriesEntityModel.V2StoryImageAuthorWithTagRatingQueryable;
    skip(amout: number): StoriesEntityModel.V2StoryImageAuthorWithTagRatingQueryable;

    order(selector: string): StoriesEntityModel.V2StoryImageAuthorWithTagRatingQueryable;
    orderBy(predicate: (it: StoriesEntityModel.V2StoryImageAuthorWithTagRating) => any): StoriesEntityModel.V2StoryImageAuthorWithTagRatingQueryable;
    orderByDescending(predicate: (it: StoriesEntityModel.V2StoryImageAuthorWithTagRating) => any): StoriesEntityModel.V2StoryImageAuthorWithTagRatingQueryable;
    
    first(predicate: (it: StoriesEntityModel.V2StoryImageAuthorWithTagRating, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.V2StoryImageAuthorWithTagRating) => void): $data.IPromise;
    first(predicate: (it: StoriesEntityModel.V2StoryImageAuthorWithTagRating, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.V2StoryImageAuthorWithTagRating[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): StoriesEntityModel.V2StoryImageAuthorWithTagRatingQueryable;
    withInlineCount(): StoriesEntityModel.V2StoryImageAuthorWithTagRatingQueryable;
    withInlineCount(selector: string): StoriesEntityModel.V2StoryImageAuthorWithTagRatingQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface V2StoryImageAuthorWithTagRatingSet extends V2StoryImageAuthorWithTagRatingQueryable {
    add(initData: { ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; StoryRating?: number; NumberOfRatings?: number; TagDescription?: string; Quality?: number; IsFavorite?: number; NewID?: $data.Guid; }): StoriesEntityModel.V2StoryImageAuthorWithTagRating;
    add(item: StoriesEntityModel.V2StoryImageAuthorWithTagRating): StoriesEntityModel.V2StoryImageAuthorWithTagRating;

    attach(item: StoriesEntityModel.V2StoryImageAuthorWithTagRating): void;
    attach(item: { ID: number; }): void;
    attachOrGet(item: StoriesEntityModel.V2StoryImageAuthorWithTagRating): StoriesEntityModel.V2StoryImageAuthorWithTagRating;
    attachOrGet(item: { ID: number; }): StoriesEntityModel.V2StoryImageAuthorWithTagRating;

    detach(item: StoriesEntityModel.V2StoryImageAuthorWithTagRating): void;
    detach(item: { ID: number; }): void;

    remove(item: StoriesEntityModel.V2StoryImageAuthorWithTagRating): void;
    remove(item: { ID: number; }): void;
    
    elementType: new (initData: { ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; StoryRating?: number; NumberOfRatings?: number; TagDescription?: string; Quality?: number; IsFavorite?: number; NewID?: $data.Guid; }) => StoriesEntityModel.V2StoryImageAuthorWithTagRating;
  }

  class V2StoryRatingSummary extends $data.Entity {
    constructor ();
    constructor (initData: { StoryID?: number; StoryRating?: number; NumberOfRatings?: number; });
    StoryID: number;
    StoryRating: number;
    NumberOfRatings: number;
    
  }

  export interface V2StoryRatingSummaryQueryable extends $data.Queryable {
    filter(predicate:(it: StoriesEntityModel.V2StoryRatingSummary) => bool): StoriesEntityModel.V2StoryRatingSummaryQueryable;
    filter(predicate:(it: StoriesEntityModel.V2StoryRatingSummary) => bool, thisArg: any): StoriesEntityModel.V2StoryRatingSummaryQueryable;

    map(projection: (it: StoriesEntityModel.V2StoryRatingSummary) => any): StoriesEntityModel.V2StoryRatingSummaryQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: StoriesEntityModel.V2StoryRatingSummary) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: StoriesEntityModel.V2StoryRatingSummary[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: StoriesEntityModel.V2StoryRatingSummary[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: StoriesEntityModel.V2StoryRatingSummary, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.V2StoryRatingSummary) => void): $data.IPromise;
    single(predicate: (it: StoriesEntityModel.V2StoryRatingSummary, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.V2StoryRatingSummary[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): StoriesEntityModel.V2StoryRatingSummaryQueryable;
    skip(amout: number): StoriesEntityModel.V2StoryRatingSummaryQueryable;

    order(selector: string): StoriesEntityModel.V2StoryRatingSummaryQueryable;
    orderBy(predicate: (it: StoriesEntityModel.V2StoryRatingSummary) => any): StoriesEntityModel.V2StoryRatingSummaryQueryable;
    orderByDescending(predicate: (it: StoriesEntityModel.V2StoryRatingSummary) => any): StoriesEntityModel.V2StoryRatingSummaryQueryable;
    
    first(predicate: (it: StoriesEntityModel.V2StoryRatingSummary, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.V2StoryRatingSummary) => void): $data.IPromise;
    first(predicate: (it: StoriesEntityModel.V2StoryRatingSummary, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.V2StoryRatingSummary[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): StoriesEntityModel.V2StoryRatingSummaryQueryable;
    withInlineCount(): StoriesEntityModel.V2StoryRatingSummaryQueryable;
    withInlineCount(selector: string): StoriesEntityModel.V2StoryRatingSummaryQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface V2StoryRatingSummarySet extends V2StoryRatingSummaryQueryable {
    add(initData: { StoryID?: number; StoryRating?: number; NumberOfRatings?: number; }): StoriesEntityModel.V2StoryRatingSummary;
    add(item: StoriesEntityModel.V2StoryRatingSummary): StoriesEntityModel.V2StoryRatingSummary;

    attach(item: StoriesEntityModel.V2StoryRatingSummary): void;
    attach(item: { StoryID: number; }): void;
    attachOrGet(item: StoriesEntityModel.V2StoryRatingSummary): StoriesEntityModel.V2StoryRatingSummary;
    attachOrGet(item: { StoryID: number; }): StoriesEntityModel.V2StoryRatingSummary;

    detach(item: StoriesEntityModel.V2StoryRatingSummary): void;
    detach(item: { StoryID: number; }): void;

    remove(item: StoriesEntityModel.V2StoryRatingSummary): void;
    remove(item: { StoryID: number; }): void;
    
    elementType: new (initData: { StoryID?: number; StoryRating?: number; NumberOfRatings?: number; }) => StoriesEntityModel.V2StoryRatingSummary;
  }

  class V2StoryTagSummary extends $data.Entity {
    constructor ();
    constructor (initData: { StoryID?: number; DescriptionSummary?: string; IsFavorite?: number; });
    StoryID: number;
    DescriptionSummary: string;
    IsFavorite: number;
    
  }

  export interface V2StoryTagSummaryQueryable extends $data.Queryable {
    filter(predicate:(it: StoriesEntityModel.V2StoryTagSummary) => bool): StoriesEntityModel.V2StoryTagSummaryQueryable;
    filter(predicate:(it: StoriesEntityModel.V2StoryTagSummary) => bool, thisArg: any): StoriesEntityModel.V2StoryTagSummaryQueryable;

    map(projection: (it: StoriesEntityModel.V2StoryTagSummary) => any): StoriesEntityModel.V2StoryTagSummaryQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: StoriesEntityModel.V2StoryTagSummary) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: StoriesEntityModel.V2StoryTagSummary[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: StoriesEntityModel.V2StoryTagSummary[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: StoriesEntityModel.V2StoryTagSummary, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.V2StoryTagSummary) => void): $data.IPromise;
    single(predicate: (it: StoriesEntityModel.V2StoryTagSummary, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.V2StoryTagSummary[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): StoriesEntityModel.V2StoryTagSummaryQueryable;
    skip(amout: number): StoriesEntityModel.V2StoryTagSummaryQueryable;

    order(selector: string): StoriesEntityModel.V2StoryTagSummaryQueryable;
    orderBy(predicate: (it: StoriesEntityModel.V2StoryTagSummary) => any): StoriesEntityModel.V2StoryTagSummaryQueryable;
    orderByDescending(predicate: (it: StoriesEntityModel.V2StoryTagSummary) => any): StoriesEntityModel.V2StoryTagSummaryQueryable;
    
    first(predicate: (it: StoriesEntityModel.V2StoryTagSummary, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.V2StoryTagSummary) => void): $data.IPromise;
    first(predicate: (it: StoriesEntityModel.V2StoryTagSummary, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.V2StoryTagSummary[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): StoriesEntityModel.V2StoryTagSummaryQueryable;
    withInlineCount(): StoriesEntityModel.V2StoryTagSummaryQueryable;
    withInlineCount(selector: string): StoriesEntityModel.V2StoryTagSummaryQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface V2StoryTagSummarySet extends V2StoryTagSummaryQueryable {
    add(initData: { StoryID?: number; DescriptionSummary?: string; IsFavorite?: number; }): StoriesEntityModel.V2StoryTagSummary;
    add(item: StoriesEntityModel.V2StoryTagSummary): StoriesEntityModel.V2StoryTagSummary;

    attach(item: StoriesEntityModel.V2StoryTagSummary): void;
    attach(item: { StoryID: number; }): void;
    attachOrGet(item: StoriesEntityModel.V2StoryTagSummary): StoriesEntityModel.V2StoryTagSummary;
    attachOrGet(item: { StoryID: number; }): StoriesEntityModel.V2StoryTagSummary;

    detach(item: StoriesEntityModel.V2StoryTagSummary): void;
    detach(item: { StoryID: number; }): void;

    remove(item: StoriesEntityModel.V2StoryTagSummary): void;
    remove(item: { StoryID: number; }): void;
    
    elementType: new (initData: { StoryID?: number; DescriptionSummary?: string; IsFavorite?: number; }) => StoriesEntityModel.V2StoryTagSummary;
  }

  class V2StoryWithImageAuthor extends $data.Entity {
    constructor ();
    constructor (initData: { ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; });
    ID: number;
    Title: string;
    StoryContent: string;
    AuthorID: number;
    ImageID: number;
    PostingDate: Date;
    CurrentEntryID: number;
    StoryVersion: number;
    EditorID: number;
    ReviewApproval: bool;
    FinalApproval: bool;
    Reviewed: bool;
    Views: number;
    CategoryID: number;
    IsDraft: bool;
    IsUnusable: bool;
    Comment: string;
    ReviewUnsure: bool;
    IsUnusableNegative: bool;
    FileName: string;
    Owner: string;
    Poster: number;
    Width: number;
    Height: number;
    MdWidth: number;
    MdHeight: number;
    LgWidth: number;
    LgHeight: number;
    PromoWidth: number;
    PromoHeight: number;
    
  }

  export interface V2StoryWithImageAuthorQueryable extends $data.Queryable {
    filter(predicate:(it: StoriesEntityModel.V2StoryWithImageAuthor) => bool): StoriesEntityModel.V2StoryWithImageAuthorQueryable;
    filter(predicate:(it: StoriesEntityModel.V2StoryWithImageAuthor) => bool, thisArg: any): StoriesEntityModel.V2StoryWithImageAuthorQueryable;

    map(projection: (it: StoriesEntityModel.V2StoryWithImageAuthor) => any): StoriesEntityModel.V2StoryWithImageAuthorQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: StoriesEntityModel.V2StoryWithImageAuthor) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: StoriesEntityModel.V2StoryWithImageAuthor[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: StoriesEntityModel.V2StoryWithImageAuthor[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthor, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.V2StoryWithImageAuthor) => void): $data.IPromise;
    single(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthor, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.V2StoryWithImageAuthor[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): StoriesEntityModel.V2StoryWithImageAuthorQueryable;
    skip(amout: number): StoriesEntityModel.V2StoryWithImageAuthorQueryable;

    order(selector: string): StoriesEntityModel.V2StoryWithImageAuthorQueryable;
    orderBy(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthor) => any): StoriesEntityModel.V2StoryWithImageAuthorQueryable;
    orderByDescending(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthor) => any): StoriesEntityModel.V2StoryWithImageAuthorQueryable;
    
    first(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthor, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.V2StoryWithImageAuthor) => void): $data.IPromise;
    first(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthor, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.V2StoryWithImageAuthor[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): StoriesEntityModel.V2StoryWithImageAuthorQueryable;
    withInlineCount(): StoriesEntityModel.V2StoryWithImageAuthorQueryable;
    withInlineCount(selector: string): StoriesEntityModel.V2StoryWithImageAuthorQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface V2StoryWithImageAuthorSet extends V2StoryWithImageAuthorQueryable {
    add(initData: { ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; }): StoriesEntityModel.V2StoryWithImageAuthor;
    add(item: StoriesEntityModel.V2StoryWithImageAuthor): StoriesEntityModel.V2StoryWithImageAuthor;

    attach(item: StoriesEntityModel.V2StoryWithImageAuthor): void;
    attach(item: { ID: number; }): void;
    attachOrGet(item: StoriesEntityModel.V2StoryWithImageAuthor): StoriesEntityModel.V2StoryWithImageAuthor;
    attachOrGet(item: { ID: number; }): StoriesEntityModel.V2StoryWithImageAuthor;

    detach(item: StoriesEntityModel.V2StoryWithImageAuthor): void;
    detach(item: { ID: number; }): void;

    remove(item: StoriesEntityModel.V2StoryWithImageAuthor): void;
    remove(item: { ID: number; }): void;
    
    elementType: new (initData: { ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; }) => StoriesEntityModel.V2StoryWithImageAuthor;
  }

  class V2StoryWithImageAuthorQuality extends $data.Entity {
    constructor ();
    constructor (initData: { ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; Quality?: number; IsFavorite?: number; StoryRating?: number; NewID?: $data.Guid; });
    ID: number;
    Title: string;
    StoryContent: string;
    AuthorID: number;
    ImageID: number;
    PostingDate: Date;
    CurrentEntryID: number;
    StoryVersion: number;
    EditorID: number;
    ReviewApproval: bool;
    FinalApproval: bool;
    Reviewed: bool;
    Views: number;
    CategoryID: number;
    IsDraft: bool;
    IsUnusable: bool;
    Comment: string;
    ReviewUnsure: bool;
    IsUnusableNegative: bool;
    FileName: string;
    Owner: string;
    Poster: number;
    Width: number;
    Height: number;
    MdWidth: number;
    MdHeight: number;
    LgWidth: number;
    LgHeight: number;
    PromoWidth: number;
    PromoHeight: number;
    Quality: number;
    IsFavorite: number;
    StoryRating: number;
    NewID: $data.Guid;
    
  }

  export interface V2StoryWithImageAuthorQualityQueryable extends $data.Queryable {
    filter(predicate:(it: StoriesEntityModel.V2StoryWithImageAuthorQuality) => bool): StoriesEntityModel.V2StoryWithImageAuthorQualityQueryable;
    filter(predicate:(it: StoriesEntityModel.V2StoryWithImageAuthorQuality) => bool, thisArg: any): StoriesEntityModel.V2StoryWithImageAuthorQualityQueryable;

    map(projection: (it: StoriesEntityModel.V2StoryWithImageAuthorQuality) => any): StoriesEntityModel.V2StoryWithImageAuthorQualityQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: StoriesEntityModel.V2StoryWithImageAuthorQuality) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: StoriesEntityModel.V2StoryWithImageAuthorQuality[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: StoriesEntityModel.V2StoryWithImageAuthorQuality[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthorQuality, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.V2StoryWithImageAuthorQuality) => void): $data.IPromise;
    single(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthorQuality, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.V2StoryWithImageAuthorQuality[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): StoriesEntityModel.V2StoryWithImageAuthorQualityQueryable;
    skip(amout: number): StoriesEntityModel.V2StoryWithImageAuthorQualityQueryable;

    order(selector: string): StoriesEntityModel.V2StoryWithImageAuthorQualityQueryable;
    orderBy(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthorQuality) => any): StoriesEntityModel.V2StoryWithImageAuthorQualityQueryable;
    orderByDescending(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthorQuality) => any): StoriesEntityModel.V2StoryWithImageAuthorQualityQueryable;
    
    first(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthorQuality, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.V2StoryWithImageAuthorQuality) => void): $data.IPromise;
    first(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthorQuality, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.V2StoryWithImageAuthorQuality[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): StoriesEntityModel.V2StoryWithImageAuthorQualityQueryable;
    withInlineCount(): StoriesEntityModel.V2StoryWithImageAuthorQualityQueryable;
    withInlineCount(selector: string): StoriesEntityModel.V2StoryWithImageAuthorQualityQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface V2StoryWithImageAuthorQualitySet extends V2StoryWithImageAuthorQualityQueryable {
    add(initData: { ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; Quality?: number; IsFavorite?: number; StoryRating?: number; NewID?: $data.Guid; }): StoriesEntityModel.V2StoryWithImageAuthorQuality;
    add(item: StoriesEntityModel.V2StoryWithImageAuthorQuality): StoriesEntityModel.V2StoryWithImageAuthorQuality;

    attach(item: StoriesEntityModel.V2StoryWithImageAuthorQuality): void;
    attach(item: { ID: number; }): void;
    attachOrGet(item: StoriesEntityModel.V2StoryWithImageAuthorQuality): StoriesEntityModel.V2StoryWithImageAuthorQuality;
    attachOrGet(item: { ID: number; }): StoriesEntityModel.V2StoryWithImageAuthorQuality;

    detach(item: StoriesEntityModel.V2StoryWithImageAuthorQuality): void;
    detach(item: { ID: number; }): void;

    remove(item: StoriesEntityModel.V2StoryWithImageAuthorQuality): void;
    remove(item: { ID: number; }): void;
    
    elementType: new (initData: { ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; Quality?: number; IsFavorite?: number; StoryRating?: number; NewID?: $data.Guid; }) => StoriesEntityModel.V2StoryWithImageAuthorQuality;
  }

  class V2StoryWithImageAuthorQualityTags extends $data.Entity {
    constructor ();
    constructor (initData: { ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; TagID?: number; IsFavorite?: number; Quality?: number; GroupID?: number; TagDescription?: string; NewID?: $data.Guid; });
    ID: number;
    Title: string;
    StoryContent: string;
    AuthorID: number;
    ImageID: number;
    PostingDate: Date;
    CurrentEntryID: number;
    StoryVersion: number;
    EditorID: number;
    ReviewApproval: bool;
    FinalApproval: bool;
    Reviewed: bool;
    Views: number;
    CategoryID: number;
    IsDraft: bool;
    IsUnusable: bool;
    Comment: string;
    ReviewUnsure: bool;
    IsUnusableNegative: bool;
    FileName: string;
    Owner: string;
    Poster: number;
    Width: number;
    Height: number;
    MdWidth: number;
    MdHeight: number;
    LgWidth: number;
    LgHeight: number;
    PromoWidth: number;
    PromoHeight: number;
    TagID: number;
    IsFavorite: number;
    Quality: number;
    GroupID: number;
    TagDescription: string;
    NewID: $data.Guid;
    
  }

  export interface V2StoryWithImageAuthorQualityTagsQueryable extends $data.Queryable {
    filter(predicate:(it: StoriesEntityModel.V2StoryWithImageAuthorQualityTags) => bool): StoriesEntityModel.V2StoryWithImageAuthorQualityTagsQueryable;
    filter(predicate:(it: StoriesEntityModel.V2StoryWithImageAuthorQualityTags) => bool, thisArg: any): StoriesEntityModel.V2StoryWithImageAuthorQualityTagsQueryable;

    map(projection: (it: StoriesEntityModel.V2StoryWithImageAuthorQualityTags) => any): StoriesEntityModel.V2StoryWithImageAuthorQualityTagsQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: StoriesEntityModel.V2StoryWithImageAuthorQualityTags) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: StoriesEntityModel.V2StoryWithImageAuthorQualityTags[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: StoriesEntityModel.V2StoryWithImageAuthorQualityTags[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthorQualityTags, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.V2StoryWithImageAuthorQualityTags) => void): $data.IPromise;
    single(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthorQualityTags, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.V2StoryWithImageAuthorQualityTags[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): StoriesEntityModel.V2StoryWithImageAuthorQualityTagsQueryable;
    skip(amout: number): StoriesEntityModel.V2StoryWithImageAuthorQualityTagsQueryable;

    order(selector: string): StoriesEntityModel.V2StoryWithImageAuthorQualityTagsQueryable;
    orderBy(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthorQualityTags) => any): StoriesEntityModel.V2StoryWithImageAuthorQualityTagsQueryable;
    orderByDescending(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthorQualityTags) => any): StoriesEntityModel.V2StoryWithImageAuthorQualityTagsQueryable;
    
    first(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthorQualityTags, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.V2StoryWithImageAuthorQualityTags) => void): $data.IPromise;
    first(predicate: (it: StoriesEntityModel.V2StoryWithImageAuthorQualityTags, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.V2StoryWithImageAuthorQualityTags[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): StoriesEntityModel.V2StoryWithImageAuthorQualityTagsQueryable;
    withInlineCount(): StoriesEntityModel.V2StoryWithImageAuthorQualityTagsQueryable;
    withInlineCount(selector: string): StoriesEntityModel.V2StoryWithImageAuthorQualityTagsQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface V2StoryWithImageAuthorQualityTagsSet extends V2StoryWithImageAuthorQualityTagsQueryable {
    add(initData: { ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; TagID?: number; IsFavorite?: number; Quality?: number; GroupID?: number; TagDescription?: string; NewID?: $data.Guid; }): StoriesEntityModel.V2StoryWithImageAuthorQualityTags;
    add(item: StoriesEntityModel.V2StoryWithImageAuthorQualityTags): StoriesEntityModel.V2StoryWithImageAuthorQualityTags;

    attach(item: StoriesEntityModel.V2StoryWithImageAuthorQualityTags): void;
    attach(item: { ID: number; }): void;
    attachOrGet(item: StoriesEntityModel.V2StoryWithImageAuthorQualityTags): StoriesEntityModel.V2StoryWithImageAuthorQualityTags;
    attachOrGet(item: { ID: number; }): StoriesEntityModel.V2StoryWithImageAuthorQualityTags;

    detach(item: StoriesEntityModel.V2StoryWithImageAuthorQualityTags): void;
    detach(item: { ID: number; }): void;

    remove(item: StoriesEntityModel.V2StoryWithImageAuthorQualityTags): void;
    remove(item: { ID: number; }): void;
    
    elementType: new (initData: { ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; TagID?: number; IsFavorite?: number; Quality?: number; GroupID?: number; TagDescription?: string; NewID?: $data.Guid; }) => StoriesEntityModel.V2StoryWithImageAuthorQualityTags;
  }

  class StoryLocation extends $data.Entity {
    constructor ();
    constructor (initData: { StoryID?: number; StoreID?: number; CreationDate?: Date; });
    StoryID: number;
    StoreID: number;
    CreationDate: Date;
    
  }

  export interface StoryLocationQueryable extends $data.Queryable {
    filter(predicate:(it: StoriesEntityModel.StoryLocation) => bool): StoriesEntityModel.StoryLocationQueryable;
    filter(predicate:(it: StoriesEntityModel.StoryLocation) => bool, thisArg: any): StoriesEntityModel.StoryLocationQueryable;

    map(projection: (it: StoriesEntityModel.StoryLocation) => any): StoriesEntityModel.StoryLocationQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: StoriesEntityModel.StoryLocation) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: StoriesEntityModel.StoryLocation[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: StoriesEntityModel.StoryLocation[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: StoriesEntityModel.StoryLocation, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.StoryLocation) => void): $data.IPromise;
    single(predicate: (it: StoriesEntityModel.StoryLocation, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.StoryLocation[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): StoriesEntityModel.StoryLocationQueryable;
    skip(amout: number): StoriesEntityModel.StoryLocationQueryable;

    order(selector: string): StoriesEntityModel.StoryLocationQueryable;
    orderBy(predicate: (it: StoriesEntityModel.StoryLocation) => any): StoriesEntityModel.StoryLocationQueryable;
    orderByDescending(predicate: (it: StoriesEntityModel.StoryLocation) => any): StoriesEntityModel.StoryLocationQueryable;
    
    first(predicate: (it: StoriesEntityModel.StoryLocation, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.StoryLocation) => void): $data.IPromise;
    first(predicate: (it: StoriesEntityModel.StoryLocation, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.StoryLocation[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): StoriesEntityModel.StoryLocationQueryable;
    withInlineCount(): StoriesEntityModel.StoryLocationQueryable;
    withInlineCount(selector: string): StoriesEntityModel.StoryLocationQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface StoryLocationSet extends StoryLocationQueryable {
    add(initData: { StoryID?: number; StoreID?: number; CreationDate?: Date; }): StoriesEntityModel.StoryLocation;
    add(item: StoriesEntityModel.StoryLocation): StoriesEntityModel.StoryLocation;

    attach(item: StoriesEntityModel.StoryLocation): void;
    attach(item: { StoryID: number; StoreID: number; }): void;
    attachOrGet(item: StoriesEntityModel.StoryLocation): StoriesEntityModel.StoryLocation;
    attachOrGet(item: { StoryID: number; StoreID: number; }): StoriesEntityModel.StoryLocation;

    detach(item: StoriesEntityModel.StoryLocation): void;
    detach(item: { StoryID: number; StoreID: number; }): void;

    remove(item: StoriesEntityModel.StoryLocation): void;
    remove(item: { StoryID: number; StoreID: number; }): void;
    
    elementType: new (initData: { StoryID?: number; StoreID?: number; CreationDate?: Date; }) => StoriesEntityModel.StoryLocation;
  }

  class StoryLocation_Location extends $data.Entity {
    constructor ();
    constructor (initData: { StoryID?: number; StoreID?: number; CreationDate?: Date; LocationNumber?: string; Name?: string; MarketableName?: string; OperatorContact_PersonID?: number; OperatorContact_Name?: string; StreetAddress_Address1?: string; StreetAddress_City?: string; StreetAddress_County?: string; StreetAddress_State?: string; StreetAddress_Zip?: string; StreetAddress_ZipExtension?: string; ShippingAddress_Address1?: string; ShippingAddress_City?: string; ShippingAddress_County?: string; ShippingAddress_State?: string; ShippingAddress_Zip?: string; ShippingAddress_ZipExtension?: string; BillingAddress_Address1?: string; BillingAddress_City?: string; BillingAddress_County?: string; BillingAddress_State?: string; BillingAddress_Zip?: string; BillingAddress_ZipExtension?: string; AreaCode?: string; PhoneNumber?: string; EmailAddress?: string; VoiceMail?: string; Status?: string; OpenDate?: Date; ProjectedOpenDate?: Date; MarketableURL?: string; GPS_Latitude?: string; GPS_Longitude?: string; ConceptCode?: string; LocationCode?: string; Playground?: string; OffersOnlineOrdering?: bool; HasDriveThru?: bool; AcceptsCfaCard?: bool; HasDiningRoom?: bool; ServesBreakfast?: bool; OffersWireless?: bool; NoUpdate?: bool; FaxNumber?: string; FaxAreaCode?: string; Message?: string; CorporateOwned?: bool; LocationDescription?: string; });
    StoryID: number;
    StoreID: number;
    CreationDate: Date;
    LocationNumber: string;
    Name: string;
    MarketableName: string;
    OperatorContact_PersonID: number;
    OperatorContact_Name: string;
    StreetAddress_Address1: string;
    StreetAddress_City: string;
    StreetAddress_County: string;
    StreetAddress_State: string;
    StreetAddress_Zip: string;
    StreetAddress_ZipExtension: string;
    ShippingAddress_Address1: string;
    ShippingAddress_City: string;
    ShippingAddress_County: string;
    ShippingAddress_State: string;
    ShippingAddress_Zip: string;
    ShippingAddress_ZipExtension: string;
    BillingAddress_Address1: string;
    BillingAddress_City: string;
    BillingAddress_County: string;
    BillingAddress_State: string;
    BillingAddress_Zip: string;
    BillingAddress_ZipExtension: string;
    AreaCode: string;
    PhoneNumber: string;
    EmailAddress: string;
    VoiceMail: string;
    Status: string;
    OpenDate: Date;
    ProjectedOpenDate: Date;
    MarketableURL: string;
    GPS_Latitude: string;
    GPS_Longitude: string;
    ConceptCode: string;
    LocationCode: string;
    Playground: string;
    OffersOnlineOrdering: bool;
    HasDriveThru: bool;
    AcceptsCfaCard: bool;
    HasDiningRoom: bool;
    ServesBreakfast: bool;
    OffersWireless: bool;
    NoUpdate: bool;
    FaxNumber: string;
    FaxAreaCode: string;
    Message: string;
    CorporateOwned: bool;
    LocationDescription: string;
    
  }

  export interface StoryLocation_LocationQueryable extends $data.Queryable {
    filter(predicate:(it: StoriesEntityModel.StoryLocation_Location) => bool): StoriesEntityModel.StoryLocation_LocationQueryable;
    filter(predicate:(it: StoriesEntityModel.StoryLocation_Location) => bool, thisArg: any): StoriesEntityModel.StoryLocation_LocationQueryable;

    map(projection: (it: StoriesEntityModel.StoryLocation_Location) => any): StoriesEntityModel.StoryLocation_LocationQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: StoriesEntityModel.StoryLocation_Location) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: StoriesEntityModel.StoryLocation_Location[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: StoriesEntityModel.StoryLocation_Location[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: StoriesEntityModel.StoryLocation_Location, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.StoryLocation_Location) => void): $data.IPromise;
    single(predicate: (it: StoriesEntityModel.StoryLocation_Location, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.StoryLocation_Location[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): StoriesEntityModel.StoryLocation_LocationQueryable;
    skip(amout: number): StoriesEntityModel.StoryLocation_LocationQueryable;

    order(selector: string): StoriesEntityModel.StoryLocation_LocationQueryable;
    orderBy(predicate: (it: StoriesEntityModel.StoryLocation_Location) => any): StoriesEntityModel.StoryLocation_LocationQueryable;
    orderByDescending(predicate: (it: StoriesEntityModel.StoryLocation_Location) => any): StoriesEntityModel.StoryLocation_LocationQueryable;
    
    first(predicate: (it: StoriesEntityModel.StoryLocation_Location, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.StoryLocation_Location) => void): $data.IPromise;
    first(predicate: (it: StoriesEntityModel.StoryLocation_Location, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.StoryLocation_Location[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): StoriesEntityModel.StoryLocation_LocationQueryable;
    withInlineCount(): StoriesEntityModel.StoryLocation_LocationQueryable;
    withInlineCount(selector: string): StoriesEntityModel.StoryLocation_LocationQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface StoryLocation_LocationSet extends StoryLocation_LocationQueryable {
    add(initData: { StoryID?: number; StoreID?: number; CreationDate?: Date; LocationNumber?: string; Name?: string; MarketableName?: string; OperatorContact_PersonID?: number; OperatorContact_Name?: string; StreetAddress_Address1?: string; StreetAddress_City?: string; StreetAddress_County?: string; StreetAddress_State?: string; StreetAddress_Zip?: string; StreetAddress_ZipExtension?: string; ShippingAddress_Address1?: string; ShippingAddress_City?: string; ShippingAddress_County?: string; ShippingAddress_State?: string; ShippingAddress_Zip?: string; ShippingAddress_ZipExtension?: string; BillingAddress_Address1?: string; BillingAddress_City?: string; BillingAddress_County?: string; BillingAddress_State?: string; BillingAddress_Zip?: string; BillingAddress_ZipExtension?: string; AreaCode?: string; PhoneNumber?: string; EmailAddress?: string; VoiceMail?: string; Status?: string; OpenDate?: Date; ProjectedOpenDate?: Date; MarketableURL?: string; GPS_Latitude?: string; GPS_Longitude?: string; ConceptCode?: string; LocationCode?: string; Playground?: string; OffersOnlineOrdering?: bool; HasDriveThru?: bool; AcceptsCfaCard?: bool; HasDiningRoom?: bool; ServesBreakfast?: bool; OffersWireless?: bool; NoUpdate?: bool; FaxNumber?: string; FaxAreaCode?: string; Message?: string; CorporateOwned?: bool; LocationDescription?: string; }): StoriesEntityModel.StoryLocation_Location;
    add(item: StoriesEntityModel.StoryLocation_Location): StoriesEntityModel.StoryLocation_Location;

    attach(item: StoriesEntityModel.StoryLocation_Location): void;
    attach(item: { StoryID: number; StoreID: number; CreationDate: Date; LocationNumber: string; CorporateOwned: bool; }): void;
    attachOrGet(item: StoriesEntityModel.StoryLocation_Location): StoriesEntityModel.StoryLocation_Location;
    attachOrGet(item: { StoryID: number; StoreID: number; CreationDate: Date; LocationNumber: string; CorporateOwned: bool; }): StoriesEntityModel.StoryLocation_Location;

    detach(item: StoriesEntityModel.StoryLocation_Location): void;
    detach(item: { StoryID: number; StoreID: number; CreationDate: Date; LocationNumber: string; CorporateOwned: bool; }): void;

    remove(item: StoriesEntityModel.StoryLocation_Location): void;
    remove(item: { StoryID: number; StoreID: number; CreationDate: Date; LocationNumber: string; CorporateOwned: bool; }): void;
    
    elementType: new (initData: { StoryID?: number; StoreID?: number; CreationDate?: Date; LocationNumber?: string; Name?: string; MarketableName?: string; OperatorContact_PersonID?: number; OperatorContact_Name?: string; StreetAddress_Address1?: string; StreetAddress_City?: string; StreetAddress_County?: string; StreetAddress_State?: string; StreetAddress_Zip?: string; StreetAddress_ZipExtension?: string; ShippingAddress_Address1?: string; ShippingAddress_City?: string; ShippingAddress_County?: string; ShippingAddress_State?: string; ShippingAddress_Zip?: string; ShippingAddress_ZipExtension?: string; BillingAddress_Address1?: string; BillingAddress_City?: string; BillingAddress_County?: string; BillingAddress_State?: string; BillingAddress_Zip?: string; BillingAddress_ZipExtension?: string; AreaCode?: string; PhoneNumber?: string; EmailAddress?: string; VoiceMail?: string; Status?: string; OpenDate?: Date; ProjectedOpenDate?: Date; MarketableURL?: string; GPS_Latitude?: string; GPS_Longitude?: string; ConceptCode?: string; LocationCode?: string; Playground?: string; OffersOnlineOrdering?: bool; HasDriveThru?: bool; AcceptsCfaCard?: bool; HasDiningRoom?: bool; ServesBreakfast?: bool; OffersWireless?: bool; NoUpdate?: bool; FaxNumber?: string; FaxAreaCode?: string; Message?: string; CorporateOwned?: bool; LocationDescription?: string; }) => StoriesEntityModel.StoryLocation_Location;
  }

  class Location_Story extends $data.Entity {
    constructor ();
    constructor (initData: { StoryID?: number; StoreID?: number; CreationDate?: Date; ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; StoryRating?: number; NumberOfRatings?: number; TagDescription?: string; Quality?: number; IsFavorite?: number; NewID?: $data.Guid; });
    StoryID: number;
    StoreID: number;
    CreationDate: Date;
    ID: number;
    Title: string;
    StoryContent: string;
    AuthorID: number;
    ImageID: number;
    PostingDate: Date;
    CurrentEntryID: number;
    StoryVersion: number;
    EditorID: number;
    ReviewApproval: bool;
    FinalApproval: bool;
    Reviewed: bool;
    Views: number;
    CategoryID: number;
    IsDraft: bool;
    IsUnusable: bool;
    Comment: string;
    ReviewUnsure: bool;
    IsUnusableNegative: bool;
    FileName: string;
    Owner: string;
    Poster: number;
    Width: number;
    Height: number;
    MdWidth: number;
    MdHeight: number;
    LgWidth: number;
    LgHeight: number;
    PromoWidth: number;
    PromoHeight: number;
    StoryRating: number;
    NumberOfRatings: number;
    TagDescription: string;
    Quality: number;
    IsFavorite: number;
    NewID: $data.Guid;
    
  }

  export interface Location_StoryQueryable extends $data.Queryable {
    filter(predicate:(it: StoriesEntityModel.Location_Story) => bool): StoriesEntityModel.Location_StoryQueryable;
    filter(predicate:(it: StoriesEntityModel.Location_Story) => bool, thisArg: any): StoriesEntityModel.Location_StoryQueryable;

    map(projection: (it: StoriesEntityModel.Location_Story) => any): StoriesEntityModel.Location_StoryQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: StoriesEntityModel.Location_Story) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: StoriesEntityModel.Location_Story[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: StoriesEntityModel.Location_Story[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: StoriesEntityModel.Location_Story, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.Location_Story) => void): $data.IPromise;
    single(predicate: (it: StoriesEntityModel.Location_Story, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.Location_Story[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): StoriesEntityModel.Location_StoryQueryable;
    skip(amout: number): StoriesEntityModel.Location_StoryQueryable;

    order(selector: string): StoriesEntityModel.Location_StoryQueryable;
    orderBy(predicate: (it: StoriesEntityModel.Location_Story) => any): StoriesEntityModel.Location_StoryQueryable;
    orderByDescending(predicate: (it: StoriesEntityModel.Location_Story) => any): StoriesEntityModel.Location_StoryQueryable;
    
    first(predicate: (it: StoriesEntityModel.Location_Story, params?: any) => bool, params?: any, handler?: (result: StoriesEntityModel.Location_Story) => void): $data.IPromise;
    first(predicate: (it: StoriesEntityModel.Location_Story, params?: any) => bool, params?: any, handler?: { success?: (result: StoriesEntityModel.Location_Story[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): StoriesEntityModel.Location_StoryQueryable;
    withInlineCount(): StoriesEntityModel.Location_StoryQueryable;
    withInlineCount(selector: string): StoriesEntityModel.Location_StoryQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Location_StorySet extends Location_StoryQueryable {
    add(initData: { StoryID?: number; StoreID?: number; CreationDate?: Date; ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; StoryRating?: number; NumberOfRatings?: number; TagDescription?: string; Quality?: number; IsFavorite?: number; NewID?: $data.Guid; }): StoriesEntityModel.Location_Story;
    add(item: StoriesEntityModel.Location_Story): StoriesEntityModel.Location_Story;

    attach(item: StoriesEntityModel.Location_Story): void;
    attach(item: { StoryID: number; StoreID: number; CreationDate: Date; ID: number; Title: string; StoryContent: string; AuthorID: number; ImageID: number; PostingDate: Date; StoryVersion: number; EditorID: number; ReviewApproval: bool; FinalApproval: bool; Comment: string; ReviewUnsure: bool; IsUnusableNegative: bool; FileName: string; Owner: string; Poster: number; Width: number; Height: number; MdWidth: number; MdHeight: number; LgWidth: number; LgHeight: number; PromoWidth: number; PromoHeight: number; }): void;
    attachOrGet(item: StoriesEntityModel.Location_Story): StoriesEntityModel.Location_Story;
    attachOrGet(item: { StoryID: number; StoreID: number; CreationDate: Date; ID: number; Title: string; StoryContent: string; AuthorID: number; ImageID: number; PostingDate: Date; StoryVersion: number; EditorID: number; ReviewApproval: bool; FinalApproval: bool; Comment: string; ReviewUnsure: bool; IsUnusableNegative: bool; FileName: string; Owner: string; Poster: number; Width: number; Height: number; MdWidth: number; MdHeight: number; LgWidth: number; LgHeight: number; PromoWidth: number; PromoHeight: number; }): StoriesEntityModel.Location_Story;

    detach(item: StoriesEntityModel.Location_Story): void;
    detach(item: { StoryID: number; StoreID: number; CreationDate: Date; ID: number; Title: string; StoryContent: string; AuthorID: number; ImageID: number; PostingDate: Date; StoryVersion: number; EditorID: number; ReviewApproval: bool; FinalApproval: bool; Comment: string; ReviewUnsure: bool; IsUnusableNegative: bool; FileName: string; Owner: string; Poster: number; Width: number; Height: number; MdWidth: number; MdHeight: number; LgWidth: number; LgHeight: number; PromoWidth: number; PromoHeight: number; }): void;

    remove(item: StoriesEntityModel.Location_Story): void;
    remove(item: { StoryID: number; StoreID: number; CreationDate: Date; ID: number; Title: string; StoryContent: string; AuthorID: number; ImageID: number; PostingDate: Date; StoryVersion: number; EditorID: number; ReviewApproval: bool; FinalApproval: bool; Comment: string; ReviewUnsure: bool; IsUnusableNegative: bool; FileName: string; Owner: string; Poster: number; Width: number; Height: number; MdWidth: number; MdHeight: number; LgWidth: number; LgHeight: number; PromoWidth: number; PromoHeight: number; }): void;
    
    elementType: new (initData: { StoryID?: number; StoreID?: number; CreationDate?: Date; ID?: number; Title?: string; StoryContent?: string; AuthorID?: number; ImageID?: number; PostingDate?: Date; CurrentEntryID?: number; StoryVersion?: number; EditorID?: number; ReviewApproval?: bool; FinalApproval?: bool; Reviewed?: bool; Views?: number; CategoryID?: number; IsDraft?: bool; IsUnusable?: bool; Comment?: string; ReviewUnsure?: bool; IsUnusableNegative?: bool; FileName?: string; Owner?: string; Poster?: number; Width?: number; Height?: number; MdWidth?: number; MdHeight?: number; LgWidth?: number; LgHeight?: number; PromoWidth?: number; PromoHeight?: number; StoryRating?: number; NumberOfRatings?: number; TagDescription?: string; Quality?: number; IsFavorite?: number; NewID?: $data.Guid; }) => StoriesEntityModel.Location_Story;
  }

}

module cfacom.entity.dao.Designer {
  export class CfaComStoriesEntities extends $data.EntityContext {
    onReady(): $data.IPromise;
    onReady(handler: (context: CfaComStoriesEntities) => void): $data.IPromise;
    V2StoryImageAuthorWithTagRating: StoriesEntityModel.V2StoryImageAuthorWithTagRatingSet;
    V2StoryRatingSummary: StoriesEntityModel.V2StoryRatingSummarySet;
    V2StoryTagSummary: StoriesEntityModel.V2StoryTagSummarySet;
    V2StoryWithImageAuthor: StoriesEntityModel.V2StoryWithImageAuthorSet;
    V2StoryWithImageAuthorQuality: StoriesEntityModel.V2StoryWithImageAuthorQualitySet;
    V2StoryWithImageAuthorQualityTags: StoriesEntityModel.V2StoryWithImageAuthorQualityTagsSet;
    StoryLocations: StoriesEntityModel.StoryLocationSet;
    StoryLocation_Location: StoriesEntityModel.StoryLocation_LocationSet;
    Location_Story: StoriesEntityModel.Location_StorySet;
    
  }
}
